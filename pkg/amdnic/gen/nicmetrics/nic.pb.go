//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD AI NIC Port Metrics
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: nic.proto

package nicmetrics

import (
	_ "github.com/alta/protopatch/patch/gopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PortStats represents the statistics of an individual port, identified by a unique ID.
type PortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the port
	ID                      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	FRAMES_RX_BAD_FCS       string `protobuf:"bytes,2,opt,name=FRAMES_RX_BAD_FCS,json=FRAMESRXBADFCS,proto3" json:"FRAMES_RX_BAD_FCS,omitempty"`
	FRAMES_RX_BAD_ALL       string `protobuf:"bytes,3,opt,name=FRAMES_RX_BAD_ALL,json=FRAMESRXBADALL,proto3" json:"FRAMES_RX_BAD_ALL,omitempty"`
	FRAMES_RX_PAUSE         string `protobuf:"bytes,4,opt,name=FRAMES_RX_PAUSE,json=FRAMESRXPAUSE,proto3" json:"FRAMES_RX_PAUSE,omitempty"`
	FRAMES_RX_BAD_LENGTH    string `protobuf:"bytes,5,opt,name=FRAMES_RX_BAD_LENGTH,json=FRAMESRXBADLENGTH,proto3" json:"FRAMES_RX_BAD_LENGTH,omitempty"`
	FRAMES_RX_UNDERSIZED    string `protobuf:"bytes,6,opt,name=FRAMES_RX_UNDERSIZED,json=FRAMESRXUNDERSIZED,proto3" json:"FRAMES_RX_UNDERSIZED,omitempty"`
	FRAMES_RX_OVERSIZED     string `protobuf:"bytes,7,opt,name=FRAMES_RX_OVERSIZED,json=FRAMESRXOVERSIZED,proto3" json:"FRAMES_RX_OVERSIZED,omitempty"`
	FRAMES_RX_FRAGMENTS     string `protobuf:"bytes,8,opt,name=FRAMES_RX_FRAGMENTS,json=FRAMESRXFRAGMENTS,proto3" json:"FRAMES_RX_FRAGMENTS,omitempty"`
	FRAMES_RX_JABBER        string `protobuf:"bytes,9,opt,name=FRAMES_RX_JABBER,json=FRAMESRXJABBER,proto3" json:"FRAMES_RX_JABBER,omitempty"`
	FRAMES_RX_PRIPAUSE      string `protobuf:"bytes,10,opt,name=FRAMES_RX_PRIPAUSE,json=FRAMESRXPRIPAUSE,proto3" json:"FRAMES_RX_PRIPAUSE,omitempty"`
	FRAMES_RX_STOMPED_CRC   string `protobuf:"bytes,11,opt,name=FRAMES_RX_STOMPED_CRC,json=FRAMESRXSTOMPEDCRC,proto3" json:"FRAMES_RX_STOMPED_CRC,omitempty"`
	FRAMES_RX_TOO_LONG      string `protobuf:"bytes,12,opt,name=FRAMES_RX_TOO_LONG,json=FRAMESRXTOOLONG,proto3" json:"FRAMES_RX_TOO_LONG,omitempty"`
	FRAMES_RX_DROPPED       string `protobuf:"bytes,13,opt,name=FRAMES_RX_DROPPED,json=FRAMESRXDROPPED,proto3" json:"FRAMES_RX_DROPPED,omitempty"`
	FRAMES_TX_BAD           string `protobuf:"bytes,14,opt,name=FRAMES_TX_BAD,json=FRAMESTXBAD,proto3" json:"FRAMES_TX_BAD,omitempty"`
	FRAMES_TX_PAUSE         string `protobuf:"bytes,15,opt,name=FRAMES_TX_PAUSE,json=FRAMESTXPAUSE,proto3" json:"FRAMES_TX_PAUSE,omitempty"`
	FRAMES_TX_PRIPAUSE      string `protobuf:"bytes,16,opt,name=FRAMES_TX_PRIPAUSE,json=FRAMESTXPRIPAUSE,proto3" json:"FRAMES_TX_PRIPAUSE,omitempty"`
	FRAMES_TX_LESS_THAN_64B string `protobuf:"bytes,17,opt,name=FRAMES_TX_LESS_THAN_64B,json=FRAMESTXLESSTHAN64B,proto3" json:"FRAMES_TX_LESS_THAN_64B,omitempty"`
	FRAMES_TX_TRUNCATED     string `protobuf:"bytes,18,opt,name=FRAMES_TX_TRUNCATED,json=FRAMESTXTRUNCATED,proto3" json:"FRAMES_TX_TRUNCATED,omitempty"`
	RSFEC_CORRECTABLE_WORD  string `protobuf:"bytes,19,opt,name=RSFEC_CORRECTABLE_WORD,json=RSFECCORRECTABLEWORD,proto3" json:"RSFEC_CORRECTABLE_WORD,omitempty"`
	RSFEC_CH_SYMBOL_ERR_CNT string `protobuf:"bytes,20,opt,name=RSFEC_CH_SYMBOL_ERR_CNT,json=RSFECCHSYMBOLERRCNT,proto3" json:"RSFEC_CH_SYMBOL_ERR_CNT,omitempty"`
}

func (x *PortStats) Reset() {
	*x = PortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStats) ProtoMessage() {}

func (x *PortStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStats.ProtoReflect.Descriptor instead.
func (*PortStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{0}
}

func (x *PortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_FCS() string {
	if x != nil {
		return x.FRAMES_RX_BAD_FCS
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_ALL() string {
	if x != nil {
		return x.FRAMES_RX_BAD_ALL
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_PAUSE() string {
	if x != nil {
		return x.FRAMES_RX_PAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_LENGTH() string {
	if x != nil {
		return x.FRAMES_RX_BAD_LENGTH
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_UNDERSIZED() string {
	if x != nil {
		return x.FRAMES_RX_UNDERSIZED
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_OVERSIZED() string {
	if x != nil {
		return x.FRAMES_RX_OVERSIZED
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_FRAGMENTS() string {
	if x != nil {
		return x.FRAMES_RX_FRAGMENTS
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_JABBER() string {
	if x != nil {
		return x.FRAMES_RX_JABBER
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_PRIPAUSE() string {
	if x != nil {
		return x.FRAMES_RX_PRIPAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_STOMPED_CRC() string {
	if x != nil {
		return x.FRAMES_RX_STOMPED_CRC
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_TOO_LONG() string {
	if x != nil {
		return x.FRAMES_RX_TOO_LONG
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_DROPPED() string {
	if x != nil {
		return x.FRAMES_RX_DROPPED
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_BAD() string {
	if x != nil {
		return x.FRAMES_TX_BAD
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_PAUSE() string {
	if x != nil {
		return x.FRAMES_TX_PAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_PRIPAUSE() string {
	if x != nil {
		return x.FRAMES_TX_PRIPAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_LESS_THAN_64B() string {
	if x != nil {
		return x.FRAMES_TX_LESS_THAN_64B
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_TRUNCATED() string {
	if x != nil {
		return x.FRAMES_TX_TRUNCATED
	}
	return ""
}

func (x *PortStats) GetRSFEC_CORRECTABLE_WORD() string {
	if x != nil {
		return x.RSFEC_CORRECTABLE_WORD
	}
	return ""
}

func (x *PortStats) GetRSFEC_CH_SYMBOL_ERR_CNT() string {
	if x != nil {
		return x.RSFEC_CH_SYMBOL_ERR_CNT
	}
	return ""
}

// NICPortStats represents a collection of port statistics grouped by NIC ID.
// This allows statistics to be organized by Network Interface Cards (NICs).
type NICPortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of PortStats, each representing statistics for an individual port on this NIC.
	Port []*PortStats `protobuf:"bytes,2,rep,name=Port,proto3" json:"port,omitempty"`
}

func (x *NICPortStats) Reset() {
	*x = NICPortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICPortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICPortStats) ProtoMessage() {}

func (x *NICPortStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICPortStats.ProtoReflect.Descriptor instead.
func (*NICPortStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{1}
}

func (x *NICPortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NICPortStats) GetPort() []*PortStats {
	if x != nil {
		return x.Port
	}
	return nil
}

// PortStatsList represents a list of AI NIC port statistics. This is typically used to store statistics
// for multiple NICs in a system, where each NIC has its associated ports with statistics.
type PortStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of NICPortStats, each representing statistics for a particular NIC.
	NIC []*NICPortStats `protobuf:"bytes,1,rep,name=NIC,proto3" json:"nic,omitempty"`
}

func (x *PortStatsList) Reset() {
	*x = PortStatsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatsList) ProtoMessage() {}

func (x *PortStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatsList.ProtoReflect.Descriptor instead.
func (*PortStatsList) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{2}
}

func (x *PortStatsList) GetNIC() []*NICPortStats {
	if x != nil {
		return x.NIC
	}
	return nil
}

type LifStatsFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RX_UNICAST_PACKETS        string `protobuf:"bytes,1,opt,name=RX_UNICAST_PACKETS,json=RXUNICASTPACKETS,proto3" json:"rx_unicast_packets,omitempty"`
	RX_UNICAST_DROP_PACKETS   string `protobuf:"bytes,2,opt,name=RX_UNICAST_DROP_PACKETS,json=RXUNICASTDROPPACKETS,proto3" json:"rx_unicast_drop_bytes,omitempty"`
	RX_MULTICAST_DROP_PACKETS string `protobuf:"bytes,3,opt,name=RX_MULTICAST_DROP_PACKETS,json=RXMULTICASTDROPPACKETS,proto3" json:"rx_multicast_drop_packets,omitempty"`
	RX_BROADCAST_DROP_PACKETS string `protobuf:"bytes,4,opt,name=RX_BROADCAST_DROP_PACKETS,json=RXBROADCASTDROPPACKETS,proto3" json:"rx_broadcast_drop_packets,omitempty"`
	RX_DMA_ERRORS             string `protobuf:"bytes,5,opt,name=RX_DMA_ERRORS,json=RXDMAERRORS,proto3" json:"rx_dma_errors,omitempty"`
	TX_UNICAST_PACKETS        string `protobuf:"bytes,6,opt,name=TX_UNICAST_PACKETS,json=TXUNICASTPACKETS,proto3" json:"tx_unicast_packets,omitempty"`
	TX_UNICAST_DROP_PACKETS   string `protobuf:"bytes,7,opt,name=TX_UNICAST_DROP_PACKETS,json=TXUNICASTDROPPACKETS,proto3" json:"tx_unicast_drop_packets,omitempty"`
	TX_MULTICAST_DROP_PACKETS string `protobuf:"bytes,8,opt,name=TX_MULTICAST_DROP_PACKETS,json=TXMULTICASTDROPPACKETS,proto3" json:"tx_multicast_drop_packets,omitempty"`
	TX_BROADCAST_DROP_PACKETS string `protobuf:"bytes,9,opt,name=TX_BROADCAST_DROP_PACKETS,json=TXBROADCASTDROPPACKETS,proto3" json:"tx_broadcast_drop_packets,omitempty"`
	TX_DMA_ERRORS             string `protobuf:"bytes,10,opt,name=TX_DMA_ERRORS,json=TXDMAERRORS,proto3" json:"tx_dma_errors,omitempty"`
}

func (x *LifStatsFields) Reset() {
	*x = LifStatsFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStatsFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStatsFields) ProtoMessage() {}

func (x *LifStatsFields) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStatsFields.ProtoReflect.Descriptor instead.
func (*LifStatsFields) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{3}
}

func (x *LifStatsFields) GetRX_UNICAST_PACKETS() string {
	if x != nil {
		return x.RX_UNICAST_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetRX_UNICAST_DROP_PACKETS() string {
	if x != nil {
		return x.RX_UNICAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetRX_MULTICAST_DROP_PACKETS() string {
	if x != nil {
		return x.RX_MULTICAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetRX_BROADCAST_DROP_PACKETS() string {
	if x != nil {
		return x.RX_BROADCAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetRX_DMA_ERRORS() string {
	if x != nil {
		return x.RX_DMA_ERRORS
	}
	return ""
}

func (x *LifStatsFields) GetTX_UNICAST_PACKETS() string {
	if x != nil {
		return x.TX_UNICAST_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetTX_UNICAST_DROP_PACKETS() string {
	if x != nil {
		return x.TX_UNICAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetTX_MULTICAST_DROP_PACKETS() string {
	if x != nil {
		return x.TX_MULTICAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetTX_BROADCAST_DROP_PACKETS() string {
	if x != nil {
		return x.TX_BROADCAST_DROP_PACKETS
	}
	return ""
}

func (x *LifStatsFields) GetTX_DMA_ERRORS() string {
	if x != nil {
		return x.TX_DMA_ERRORS
	}
	return ""
}

type LifStatsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the logical interface (LIF) on the NIC
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
}

func (x *LifStatsSpec) Reset() {
	*x = LifStatsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStatsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStatsSpec) ProtoMessage() {}

func (x *LifStatsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStatsSpec.ProtoReflect.Descriptor instead.
func (*LifStatsSpec) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{4}
}

func (x *LifStatsSpec) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// LifStats represents statistics for a particular logical interface (LIF) on a NIC (Network Interface Card).
type LifStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec has the ID of the LIF.
	Spec *LifStatsSpec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"spec,omitempty"`
	// A list of statistics for this particular LIF.
	// Each statistic could represent something like "Rx unicast bytes" or "Tx multicast packets".
	Statistics *LifStatsFields `protobuf:"bytes,2,opt,name=Statistics,proto3" json:"statistics,omitempty"`
}

func (x *LifStats) Reset() {
	*x = LifStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStats) ProtoMessage() {}

func (x *LifStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStats.ProtoReflect.Descriptor instead.
func (*LifStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{5}
}

func (x *LifStats) GetSpec() *LifStatsSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LifStats) GetStatistics() *LifStatsFields {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// NICLifStats represents statistics for a specific NIC (Network Interface Card) and its associated LIFs.
type NICLifStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC (Network Interface Card)
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of LifStats, where each item represents statistics for a specific LIF under this NIC.
	Lif []*LifStats `protobuf:"bytes,2,rep,name=Lif,proto3" json:"lif,omitempty"`
}

func (x *NICLifStats) Reset() {
	*x = NICLifStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICLifStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICLifStats) ProtoMessage() {}

func (x *NICLifStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICLifStats.ProtoReflect.Descriptor instead.
func (*NICLifStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{6}
}

func (x *NICLifStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NICLifStats) GetLif() []*LifStats {
	if x != nil {
		return x.Lif
	}
	return nil
}

// LifStatsList represents a collection of NICLifStats, allowing to manage statistics for multiple NICs.
type LifStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of NICLifStats, where each item represents the statistics for a NIC and its associated LIFs.
	NIC []*NICLifStats `protobuf:"bytes,1,rep,name=NIC,proto3" json:"nic,omitempty"`
}

func (x *LifStatsList) Reset() {
	*x = LifStatsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStatsList) ProtoMessage() {}

func (x *LifStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStatsList.ProtoReflect.Descriptor instead.
func (*LifStatsList) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{7}
}

func (x *LifStatsList) GetNIC() []*NICLifStats {
	if x != nil {
		return x.NIC
	}
	return nil
}

type DcqcnStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CURR_BYTE_COUNTER        string `protobuf:"bytes,1,opt,name=CURR_BYTE_COUNTER,json=CURRBYTECOUNTER,proto3" json:"curr_byte_counter,omitempty"`
	NUM_BYTE_COUNTER_EXPIRED string `protobuf:"bytes,2,opt,name=NUM_BYTE_COUNTER_EXPIRED,json=NUMBYTECOUNTEREXPIRED,proto3" json:"num_byte_counter_expired,omitempty"`
	NUM_TIMER_EXPIRED        string `protobuf:"bytes,3,opt,name=NUM_TIMER_EXPIRED,json=NUMTIMEREXPIRED,proto3" json:"num_timer_expired,omitempty"`
	NUM_ALPHA_TIMER_EXPIRED  string `protobuf:"bytes,4,opt,name=NUM_ALPHA_TIMER_EXPIRED,json=NUMALPHATIMEREXPIRED,proto3" json:"num_alpha_timer_expired,omitempty"`
	NUM_CNP_RCVD             string `protobuf:"bytes,5,opt,name=NUM_CNP_RCVD,json=NUMCNPRCVD,proto3" json:"num_cnp_rcvd,omitempty"`
	NUM_CNP_PROCESSED        string `protobuf:"bytes,6,opt,name=NUM_CNP_PROCESSED,json=NUMCNPPROCESSED,proto3" json:"num_cnp_processed,omitempty"`
}

func (x *DcqcnStats) Reset() {
	*x = DcqcnStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcqcnStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcqcnStats) ProtoMessage() {}

func (x *DcqcnStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcqcnStats.ProtoReflect.Descriptor instead.
func (*DcqcnStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{8}
}

func (x *DcqcnStats) GetCURR_BYTE_COUNTER() string {
	if x != nil {
		return x.CURR_BYTE_COUNTER
	}
	return ""
}

func (x *DcqcnStats) GetNUM_BYTE_COUNTER_EXPIRED() string {
	if x != nil {
		return x.NUM_BYTE_COUNTER_EXPIRED
	}
	return ""
}

func (x *DcqcnStats) GetNUM_TIMER_EXPIRED() string {
	if x != nil {
		return x.NUM_TIMER_EXPIRED
	}
	return ""
}

func (x *DcqcnStats) GetNUM_ALPHA_TIMER_EXPIRED() string {
	if x != nil {
		return x.NUM_ALPHA_TIMER_EXPIRED
	}
	return ""
}

func (x *DcqcnStats) GetNUM_CNP_RCVD() string {
	if x != nil {
		return x.NUM_CNP_RCVD
	}
	return ""
}

func (x *DcqcnStats) GetNUM_CNP_PROCESSED() string {
	if x != nil {
		return x.NUM_CNP_PROCESSED
	}
	return ""
}

type RequesterTxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NUM_PACKET             string `protobuf:"bytes,1,opt,name=NUM_PACKET,json=NUMPACKET,proto3" json:"num_packet,omitempty"`
	NUM_SEND_MSGS_WITH_RKE string `protobuf:"bytes,2,opt,name=NUM_SEND_MSGS_WITH_RKE,json=NUMSENDMSGSWITHRKE,proto3" json:"num_send_msgs_with_invalid_remote_key_error,omitempty"`
	NUM_LOCAL_ACK_TIMEOUTS string `protobuf:"bytes,3,opt,name=NUM_LOCAL_ACK_TIMEOUTS,json=NUMLOCALACKTIMEOUTS,proto3" json:"NUM_LOCAL_ACK_TIMEOUTS,omitempty"`
	RNR_TIMEOUT            string `protobuf:"bytes,4,opt,name=RNR_TIMEOUT,json=RNRTIMEOUT,proto3" json:"RNR_TIMEOUT,omitempty"`
	TIMES_SQ_DRAINED       string `protobuf:"bytes,5,opt,name=TIMES_SQ_DRAINED,json=TIMESSQDRAINED,proto3" json:"TIMES_SQ_DRAINED,omitempty"`
	NUM_CNP_SENT           string `protobuf:"bytes,6,opt,name=NUM_CNP_SENT,json=NUMCNPSENT,proto3" json:"num_cnp_sent,omitempty"`
}

func (x *RequesterTxStats) Reset() {
	*x = RequesterTxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequesterTxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequesterTxStats) ProtoMessage() {}

func (x *RequesterTxStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequesterTxStats.ProtoReflect.Descriptor instead.
func (*RequesterTxStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{9}
}

func (x *RequesterTxStats) GetNUM_PACKET() string {
	if x != nil {
		return x.NUM_PACKET
	}
	return ""
}

func (x *RequesterTxStats) GetNUM_SEND_MSGS_WITH_RKE() string {
	if x != nil {
		return x.NUM_SEND_MSGS_WITH_RKE
	}
	return ""
}

func (x *RequesterTxStats) GetNUM_LOCAL_ACK_TIMEOUTS() string {
	if x != nil {
		return x.NUM_LOCAL_ACK_TIMEOUTS
	}
	return ""
}

func (x *RequesterTxStats) GetRNR_TIMEOUT() string {
	if x != nil {
		return x.RNR_TIMEOUT
	}
	return ""
}

func (x *RequesterTxStats) GetTIMES_SQ_DRAINED() string {
	if x != nil {
		return x.TIMES_SQ_DRAINED
	}
	return ""
}

func (x *RequesterTxStats) GetNUM_CNP_SENT() string {
	if x != nil {
		return x.NUM_CNP_SENT
	}
	return ""
}

type RequesterRxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NUM_PACKET                string `protobuf:"bytes,1,opt,name=NUM_PACKET,json=NUMPACKET,proto3" json:"num_packet,omitempty"`
	NUM_PKTS_WITH_ECN_MARKING string `protobuf:"bytes,2,opt,name=NUM_PKTS_WITH_ECN_MARKING,json=NUMPKTSWITHECNMARKING,proto3" json:"num_packets_with_ecn_marking,omitempty"`
}

func (x *RequesterRxStats) Reset() {
	*x = RequesterRxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequesterRxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequesterRxStats) ProtoMessage() {}

func (x *RequesterRxStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequesterRxStats.ProtoReflect.Descriptor instead.
func (*RequesterRxStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{10}
}

func (x *RequesterRxStats) GetNUM_PACKET() string {
	if x != nil {
		return x.NUM_PACKET
	}
	return ""
}

func (x *RequesterRxStats) GetNUM_PKTS_WITH_ECN_MARKING() string {
	if x != nil {
		return x.NUM_PKTS_WITH_ECN_MARKING
	}
	return ""
}

type ResponderTxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NUM_PACKET            string `protobuf:"bytes,1,opt,name=NUM_PACKET,json=NUMPACKET,proto3" json:"num_packet,omitempty"`
	RNR_ERROR             string `protobuf:"bytes,2,opt,name=RNR_ERROR,json=RNRERROR,proto3" json:"RNR_ERROR,omitempty"`
	NUM_SEQUENCE_ERROR    string `protobuf:"bytes,3,opt,name=NUM_SEQUENCE_ERROR,json=NUMSEQUENCEERROR,proto3" json:"NUM_SEQUENCE_ERROR,omitempty"`
	NUM_RP_BYTE_THRES_HIT string `protobuf:"bytes,4,opt,name=NUM_RP_BYTE_THRES_HIT,json=NUMRPBYTETHRESHIT,proto3" json:"NUM_RP_BYTE_THRES_HIT,omitempty"`
	NUM_RP_MAX_RATE_HIT   string `protobuf:"bytes,5,opt,name=NUM_RP_MAX_RATE_HIT,json=NUMRPMAXRATEHIT,proto3" json:"NUM_RP_MAX_RATE_HIT,omitempty"`
}

func (x *ResponderTxStats) Reset() {
	*x = ResponderTxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponderTxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponderTxStats) ProtoMessage() {}

func (x *ResponderTxStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponderTxStats.ProtoReflect.Descriptor instead.
func (*ResponderTxStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{11}
}

func (x *ResponderTxStats) GetNUM_PACKET() string {
	if x != nil {
		return x.NUM_PACKET
	}
	return ""
}

func (x *ResponderTxStats) GetRNR_ERROR() string {
	if x != nil {
		return x.RNR_ERROR
	}
	return ""
}

func (x *ResponderTxStats) GetNUM_SEQUENCE_ERROR() string {
	if x != nil {
		return x.NUM_SEQUENCE_ERROR
	}
	return ""
}

func (x *ResponderTxStats) GetNUM_RP_BYTE_THRES_HIT() string {
	if x != nil {
		return x.NUM_RP_BYTE_THRES_HIT
	}
	return ""
}

func (x *ResponderTxStats) GetNUM_RP_MAX_RATE_HIT() string {
	if x != nil {
		return x.NUM_RP_MAX_RATE_HIT
	}
	return ""
}

type ResponderRxStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NUM_PACKET                string `protobuf:"bytes,1,opt,name=NUM_PACKET,json=NUMPACKET,proto3" json:"num_packet,omitempty"`
	NUM_SEND_MSGS_WITH_RKE    string `protobuf:"bytes,2,opt,name=NUM_SEND_MSGS_WITH_RKE,json=NUMSENDMSGSWITHRKE,proto3" json:"num_send_msgs_with_invalid_remote_key_error,omitempty"`
	NUM_PKTS_WITH_ECN_MARKING string `protobuf:"bytes,3,opt,name=NUM_PKTS_WITH_ECN_MARKING,json=NUMPKTSWITHECNMARKING,proto3" json:"num_packets_with_ecn_marking,omitempty"`
	NUM_CNPS_RECEIVED         string `protobuf:"bytes,4,opt,name=NUM_CNPS_RECEIVED,json=NUMCNPSRECEIVED,proto3" json:"num_cnps_received,omitempty"`
	MAX_RECIRC_EXCEEDED_DROP  string `protobuf:"bytes,5,opt,name=MAX_RECIRC_EXCEEDED_DROP,json=MAXRECIRCEXCEEDEDDROP,proto3" json:"max_recirculation_exceeded_packet_drop,omitempty"`
	NUM_MEM_WINDOW_INVALID    string `protobuf:"bytes,6,opt,name=NUM_MEM_WINDOW_INVALID,json=NUMMEMWINDOWINVALID,proto3" json:"num_mem_window_invalidate_msg,omitempty"`
	NUM_DUPL_WITH_WR_SEND_OPC string `protobuf:"bytes,7,opt,name=NUM_DUPL_WITH_WR_SEND_OPC,json=NUMDUPLWITHWRSENDOPC,proto3" json:"num_duplicate_pkts_with_write_send_opcode,omitempty"`
	NUM_DUPL_READ_BACKTRACK   string `protobuf:"bytes,8,opt,name=NUM_DUPL_READ_BACKTRACK,json=NUMDUPLREADBACKTRACK,proto3" json:"num_duplicate_read_atomic_backtrack_pkt,omitempty"`
	NUM_DUPL_READ_ATOMIC_DROP string `protobuf:"bytes,9,opt,name=NUM_DUPL_READ_ATOMIC_DROP,json=NUMDUPLREADATOMICDROP,proto3" json:"num_duplicate_read_atomic_drop_pkt,omitempty"`
}

func (x *ResponderRxStats) Reset() {
	*x = ResponderRxStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponderRxStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponderRxStats) ProtoMessage() {}

func (x *ResponderRxStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponderRxStats.ProtoReflect.Descriptor instead.
func (*ResponderRxStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{12}
}

func (x *ResponderRxStats) GetNUM_PACKET() string {
	if x != nil {
		return x.NUM_PACKET
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_SEND_MSGS_WITH_RKE() string {
	if x != nil {
		return x.NUM_SEND_MSGS_WITH_RKE
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_PKTS_WITH_ECN_MARKING() string {
	if x != nil {
		return x.NUM_PKTS_WITH_ECN_MARKING
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_CNPS_RECEIVED() string {
	if x != nil {
		return x.NUM_CNPS_RECEIVED
	}
	return ""
}

func (x *ResponderRxStats) GetMAX_RECIRC_EXCEEDED_DROP() string {
	if x != nil {
		return x.MAX_RECIRC_EXCEEDED_DROP
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_MEM_WINDOW_INVALID() string {
	if x != nil {
		return x.NUM_MEM_WINDOW_INVALID
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_DUPL_WITH_WR_SEND_OPC() string {
	if x != nil {
		return x.NUM_DUPL_WITH_WR_SEND_OPC
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_DUPL_READ_BACKTRACK() string {
	if x != nil {
		return x.NUM_DUPL_READ_BACKTRACK
	}
	return ""
}

func (x *ResponderRxStats) GetNUM_DUPL_READ_ATOMIC_DROP() string {
	if x != nil {
		return x.NUM_DUPL_READ_ATOMIC_DROP
	}
	return ""
}

type SendQStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqTx *RequesterTxStats `protobuf:"bytes,1,opt,name=ReqTx,proto3" json:"requester_tx_statistics,omitempty"`
	ReqRx *RequesterRxStats `protobuf:"bytes,2,opt,name=ReqRx,proto3" json:"requester_rx_statistcs,omitempty"`
	DcQcn *DcqcnStats       `protobuf:"bytes,3,opt,name=DcQcn,proto3" json:"dcqcn_stats,omitempty"`
}

func (x *SendQStats) Reset() {
	*x = SendQStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendQStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendQStats) ProtoMessage() {}

func (x *SendQStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendQStats.ProtoReflect.Descriptor instead.
func (*SendQStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{13}
}

func (x *SendQStats) GetReqTx() *RequesterTxStats {
	if x != nil {
		return x.ReqTx
	}
	return nil
}

func (x *SendQStats) GetReqRx() *RequesterRxStats {
	if x != nil {
		return x.ReqRx
	}
	return nil
}

func (x *SendQStats) GetDcQcn() *DcqcnStats {
	if x != nil {
		return x.DcQcn
	}
	return nil
}

type RecvQStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespTx *ResponderTxStats `protobuf:"bytes,1,opt,name=RespTx,proto3" json:"responder_tx_statistics,omitempty"`
	RespRx *ResponderRxStats `protobuf:"bytes,2,opt,name=RespRx,proto3" json:"responder_rx_statistics,omitempty"`
	DcQcn  *DcqcnStats       `protobuf:"bytes,3,opt,name=DcQcn,proto3" json:"dcqcn_stats,omitempty"`
}

func (x *RecvQStats) Reset() {
	*x = RecvQStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvQStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvQStats) ProtoMessage() {}

func (x *RecvQStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvQStats.ProtoReflect.Descriptor instead.
func (*RecvQStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{14}
}

func (x *RecvQStats) GetRespTx() *ResponderTxStats {
	if x != nil {
		return x.RespTx
	}
	return nil
}

func (x *RecvQStats) GetRespRx() *ResponderRxStats {
	if x != nil {
		return x.RespRx
	}
	return nil
}

func (x *RecvQStats) GetDcQcn() *DcqcnStats {
	if x != nil {
		return x.DcQcn
	}
	return nil
}

type QPStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send_queue stats
	Sq *SendQStats `protobuf:"bytes,1,opt,name=Sq,proto3" json:"send_queue,omitempty"`
	// recv_queue stats
	Rq *RecvQStats `protobuf:"bytes,2,opt,name=Rq,proto3" json:"receive_queue,omitempty"`
}

func (x *QPStats) Reset() {
	*x = QPStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPStats) ProtoMessage() {}

func (x *QPStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPStats.ProtoReflect.Descriptor instead.
func (*QPStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{15}
}

func (x *QPStats) GetSq() *SendQStats {
	if x != nil {
		return x.Sq
	}
	return nil
}

func (x *QPStats) GetRq() *RecvQStats {
	if x != nil {
		return x.Rq
	}
	return nil
}

type QPStatsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the queue_pair on the LIF
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
}

func (x *QPStatsSpec) Reset() {
	*x = QPStatsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPStatsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPStatsSpec) ProtoMessage() {}

func (x *QPStatsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPStatsSpec.ProtoReflect.Descriptor instead.
func (*QPStatsSpec) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{16}
}

func (x *QPStatsSpec) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type QPStatsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec has the ID of the QP.
	Spec *QPStatsSpec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"spec,omitempty"`
	// QP statistics for this particular QP ID.
	Stats *QPStats `protobuf:"bytes,2,opt,name=Stats,proto3" json:"statistics,omitempty"`
}

func (x *QPStatsInfo) Reset() {
	*x = QPStatsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPStatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPStatsInfo) ProtoMessage() {}

func (x *QPStatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPStatsInfo.ProtoReflect.Descriptor instead.
func (*QPStatsInfo) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{17}
}

func (x *QPStatsInfo) GetSpec() *QPStatsSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *QPStatsInfo) GetStats() *QPStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// LifQPStats represents QP statistics for a particular logical interface (LIF) on a NIC (Network Interface Card).
type LifQPStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec has the ID of the LIF.
	Spec *QPStatsSpec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"spec,omitempty"`
	// A list of QP statistics for this particular LIF.
	QPStatsList []*QPStatsInfo `protobuf:"bytes,2,rep,name=QPStatsList,proto3" json:"queue_pair,omitempty"`
}

func (x *LifQPStats) Reset() {
	*x = LifQPStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifQPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifQPStats) ProtoMessage() {}

func (x *LifQPStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifQPStats.ProtoReflect.Descriptor instead.
func (*LifQPStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{18}
}

func (x *LifQPStats) GetSpec() *QPStatsSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *LifQPStats) GetQPStatsList() []*QPStatsInfo {
	if x != nil {
		return x.QPStatsList
	}
	return nil
}

// NICQPStats represents QP statistics for a specific NIC (Network Interface Card) and its associated LIFs.
type NicQPStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC (Network Interface Card)
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of LifStats, where each item represents QP statistics for a specific LIF under this NIC.
	LifList []*LifQPStats `protobuf:"bytes,2,rep,name=LifList,proto3" json:"lif,omitempty"`
}

func (x *NicQPStats) Reset() {
	*x = NicQPStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NicQPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NicQPStats) ProtoMessage() {}

func (x *NicQPStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NicQPStats.ProtoReflect.Descriptor instead.
func (*NicQPStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{19}
}

func (x *NicQPStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NicQPStats) GetLifList() []*LifQPStats {
	if x != nil {
		return x.LifList
	}
	return nil
}

// LifStatsList represents a collection of NICLifStats, allowing to manage statistics for multiple NICs.
type RdmaQPStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of RdmaQPStats, where each item represents QP statistics for a NIC and its associated LIFs.
	NicList []*NicQPStats `protobuf:"bytes,1,rep,name=NicList,proto3" json:"nic,omitempty"`
}

func (x *RdmaQPStats) Reset() {
	*x = RdmaQPStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdmaQPStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdmaQPStats) ProtoMessage() {}

func (x *RdmaQPStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdmaQPStats.ProtoReflect.Descriptor instead.
func (*RdmaQPStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{20}
}

func (x *RdmaQPStats) GetNicList() []*NicQPStats {
	if x != nil {
		return x.NicList
	}
	return nil
}

var File_nic_proto protoreflect.FileDescriptor

var file_nic_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x69, 0x63,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf4, 0x0d, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5,
	0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x11,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x43,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x46, 0x43, 0x53, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x42, 0x41, 0x44, 0x46,
	0x43, 0x53, 0x12, 0x54, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca,
	0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x52, 0x58, 0x42, 0x41, 0x44, 0x41, 0x4c, 0x4c, 0x12, 0x4f, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xca, 0xb5, 0x03, 0x23, 0xa2, 0x01, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x52, 0x58, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x5d, 0x0a, 0x14, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x42,
	0x41, 0x44, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12, 0x5e, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x4f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x52, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x12, 0x52, 0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xca, 0xb5,
	0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58,
	0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x12, 0x58, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x12, 0x60, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54,
	0x4f, 0x4d, 0x50, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x45, 0x44, 0x5f,
	0x43, 0x52, 0x43, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x12,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x45, 0x44, 0x43,
	0x52, 0x43, 0x12, 0x57, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x52, 0x58, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x12, 0x55, 0x0a, 0x11, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x12, 0x49, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xca, 0xb5, 0x03, 0x21, 0xa2,
	0x01, 0x1e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54,
	0x58, 0x5f, 0x42, 0x41, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58, 0x42, 0x41, 0x44, 0x12, 0x4f, 0x0a,
	0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xca, 0xb5, 0x03, 0x23, 0xa2, 0x01, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x58,
	0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26,
	0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58,
	0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x65, 0x0a, 0x17, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x36, 0x34, 0x42, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2,
	0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54,
	0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x34, 0x42, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x54, 0x58, 0x4c, 0x45, 0x53, 0x53, 0x54, 0x48, 0x41, 0x4e, 0x36, 0x34, 0x42, 0x12,
	0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5,
	0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x54, 0x58, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x64, 0x0a, 0x16,
	0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xca, 0xb5,
	0x03, 0x2a, 0xa2, 0x01, 0x27, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x52, 0x53, 0x46, 0x45, 0x43,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x53,
	0x46, 0x45, 0x43, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x57, 0x4f,
	0x52, 0x44, 0x12, 0x65, 0x0a, 0x17, 0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x53, 0x46, 0x45, 0x43, 0x43, 0x48, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x45, 0x52, 0x52, 0x43, 0x4e, 0x54, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4e, 0x49,
	0x43, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1c, 0xca, 0xb5, 0x03,
	0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x58, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x49, 0x43, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x69, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4e, 0x49, 0x43, 0x22, 0xe0, 0x07, 0x0a, 0x0e, 0x4c, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x12,
	0x52, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01,
	0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x52, 0x58, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x64, 0x0a, 0x17, 0x52, 0x58, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x58, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x6c, 0x0a, 0x19,
	0x52, 0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xca, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x16, 0x52, 0x58, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x6c, 0x0a, 0x19, 0x52, 0x58,
	0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xca,
	0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x16, 0x52, 0x58, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x49, 0x0a, 0x0d, 0x52, 0x58, 0x5f, 0x44,
	0x4d, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xca, 0xb5, 0x03, 0x21, 0xa2, 0x01, 0x1e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78,
	0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x52, 0x58, 0x44, 0x4d, 0x41, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x12, 0x58, 0x0a, 0x12, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x54, 0x58, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x66, 0x0a,
	0x17, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x14, 0x54, 0x58, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x12, 0x6c, 0x0a, 0x19, 0x54, 0x58, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xca, 0xb5, 0x03, 0x2d, 0xa2, 0x01,
	0x2a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x16, 0x54, 0x58, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x12, 0x6c, 0x0a, 0x19, 0x54, 0x58, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xca, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x16, 0x54, 0x58, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x12, 0x49, 0x0a, 0x0d, 0x54, 0x58, 0x5f, 0x44, 0x4d, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xca, 0xb5, 0x03, 0x21, 0xa2, 0x01,
	0x1e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78, 0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0b, 0x54, 0x58, 0x44, 0x4d, 0x41, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x22, 0x3a, 0x0a, 0x0c,
	0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01,
	0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42, 0x1c, 0xca,
	0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x70, 0x65, 0x63,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x5e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0x7e, 0x0a, 0x0b, 0x4e, 0x49, 0x43, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5,
	0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x03,
	0x4c, 0x69, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x69, 0x63, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x69,
	0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4c, 0x69,
	0x66, 0x22, 0x56, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x49, 0x43, 0x4c,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x69, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4e, 0x49, 0x43, 0x22, 0xac, 0x04, 0x0a, 0x0a, 0x44, 0x63,
	0x71, 0x63, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x43, 0x55, 0x52, 0x52,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f,
	0x43, 0x55, 0x52, 0x52, 0x42, 0x59, 0x54, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x12,
	0x69, 0x0a, 0x18, 0x4e, 0x55, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0xca, 0xb5, 0x03, 0x2c, 0xa2, 0x01, 0x29, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x15, 0x4e, 0x55, 0x4d, 0x42, 0x59, 0x54, 0x45, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x55, 0x0a, 0x11, 0x4e, 0x55,
	0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0f, 0x4e, 0x55, 0x4d, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x12, 0x66, 0x0a, 0x17, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x14, 0x4e, 0x55, 0x4d, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x54, 0x49, 0x4d,
	0x45, 0x52, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x12, 0x46, 0x0a, 0x0c, 0x4e, 0x55, 0x4d,
	0x5f, 0x43, 0x4e, 0x50, 0x5f, 0x52, 0x43, 0x56, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xca, 0xb5, 0x03, 0x20, 0xa2, 0x01, 0x1d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6e, 0x70, 0x5f, 0x72, 0x63, 0x76, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x4e, 0x55, 0x4d, 0x43, 0x4e, 0x50, 0x52, 0x43, 0x56,
	0x44, 0x12, 0x55, 0x0a, 0x11, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4e, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5,
	0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6e, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x4e, 0x55, 0x4d, 0x43, 0x4e, 0x50, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x22, 0xac, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0a, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x4e, 0x55, 0x4d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x12, 0x77, 0x0a, 0x16, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x4b, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x43, 0xca, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x12, 0x4e, 0x55, 0x4d, 0x53, 0x45, 0x4e, 0x44, 0x4d, 0x53,
	0x47, 0x53, 0x57, 0x49, 0x54, 0x48, 0x52, 0x4b, 0x45, 0x12, 0x62, 0x0a, 0x16, 0x4e, 0x55, 0x4d,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2,
	0x01, 0x26, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x4e, 0x55, 0x4d, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x41, 0x43, 0x4b, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x53, 0x12, 0x52, 0x0a,
	0x0b, 0x52, 0x4e, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xca, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x52, 0x4e, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x12, 0x5c, 0x0a, 0x10, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x5f, 0x53, 0x51, 0x5f, 0x44, 0x52,
	0x41, 0x49, 0x4e, 0x45, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xca, 0xb5, 0x03,
	0x2e, 0xa2, 0x01, 0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0e, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x53, 0x51, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x12,
	0x46, 0x0a, 0x0c, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4e, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xca, 0xb5, 0x03, 0x20, 0xa2, 0x01, 0x1d, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x4e, 0x55, 0x4d,
	0x43, 0x4e, 0x50, 0x53, 0x45, 0x4e, 0x54, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x4e, 0x55, 0x4d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x12,
	0x6e, 0x0a, 0x19, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0xca, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x15, 0x4e, 0x55, 0x4d, 0x50, 0x4b, 0x54,
	0x53, 0x57, 0x49, 0x54, 0x48, 0x45, 0x43, 0x4e, 0x4d, 0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x22,
	0xc3, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01,
	0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x4e, 0x55,
	0x4d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x12, 0x4f, 0x0a, 0x09, 0x52, 0x4e, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xca, 0xb5, 0x03, 0x2e,
	0xa2, 0x01, 0x2b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x6e, 0x72, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08,
	0x52, 0x4e, 0x52, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x57, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x5f,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x10, 0x4e, 0x55, 0x4d, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x12, 0x68, 0x0a, 0x15, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x50, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x5f, 0x48, 0x49, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xca, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x6e, 0x75,
	0x6d, 0x5f, 0x64, 0x63, 0x71, 0x63, 0x6e, 0x5f, 0x72, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x74, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x4e, 0x55, 0x4d, 0x52, 0x50, 0x42,
	0x59, 0x54, 0x45, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x49, 0x54, 0x12, 0x58, 0x0a, 0x13, 0x4e,
	0x55, 0x4d, 0x5f, 0x52, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x48,
	0x49, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01,
	0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x4e, 0x55, 0x4d, 0x52, 0x50, 0x4d, 0x41, 0x58, 0x52, 0x41,
	0x54, 0x45, 0x48, 0x49, 0x54, 0x22, 0xe4, 0x07, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x4e, 0x55,
	0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x09, 0x4e, 0x55, 0x4d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x12, 0x77, 0x0a,
	0x16, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x52, 0x4b, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xca,
	0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x12, 0x4e, 0x55, 0x4d, 0x53, 0x45, 0x4e, 0x44, 0x4d, 0x53, 0x47, 0x53, 0x57,
	0x49, 0x54, 0x48, 0x52, 0x4b, 0x45, 0x12, 0x6e, 0x0a, 0x19, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x49, 0x4e, 0x47, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xca, 0xb5, 0x03, 0x30, 0xa2,
	0x01, 0x2d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x15, 0x4e, 0x55, 0x4d, 0x50, 0x4b, 0x54, 0x53, 0x57, 0x49, 0x54, 0x48, 0x45, 0x43, 0x4e, 0x4d,
	0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x12, 0x55, 0x0a, 0x11, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4e,
	0x50, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6e, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x4e, 0x55,
	0x4d, 0x43, 0x4e, 0x50, 0x53, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x12, 0x77, 0x0a,
	0x18, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x52, 0x43, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3e, 0xca, 0xb5, 0x03, 0x3a, 0xa2, 0x01, 0x37, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x15, 0x4d, 0x41, 0x58, 0x52, 0x45, 0x43, 0x49, 0x52, 0x43, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x44, 0x52, 0x4f, 0x50, 0x12, 0x6a, 0x0a, 0x16, 0x4e, 0x55, 0x4d, 0x5f, 0x4d, 0x45,
	0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xca, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x73, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x4e,
	0x55, 0x4d, 0x4d, 0x45, 0x4d, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x12, 0x7a, 0x0a, 0x19, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x57, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x43, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xca, 0xb5, 0x03, 0x3d, 0xa2, 0x01, 0x3a, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x4e, 0x55, 0x4d, 0x44, 0x55, 0x50,
	0x4c, 0x57, 0x49, 0x54, 0x48, 0x57, 0x52, 0x53, 0x45, 0x4e, 0x44, 0x4f, 0x50, 0x43, 0x12, 0x76,
	0x0a, 0x17, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3f, 0xca, 0xb5, 0x03, 0x3b, 0xa2, 0x01, 0x38, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75,
	0x6d, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x70, 0x6b, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x14, 0x4e, 0x55, 0x4d, 0x44, 0x55, 0x50, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x42, 0x41, 0x43,
	0x4b, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x12, 0x74, 0x0a, 0x19, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xca, 0xb5, 0x03, 0x36, 0xa2,
	0x01, 0x33, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x15, 0x4e, 0x55, 0x4d, 0x44, 0x55, 0x50, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x44, 0x52, 0x4f, 0x50, 0x22, 0xa8, 0x02, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x05, 0x52,
	0x65, 0x71, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x63,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01,
	0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x52, 0x65, 0x71, 0x54, 0x78,
	0x12, 0x62, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x52, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x2e, 0xca,
	0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x63, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x52,
	0x65, 0x71, 0x52, 0x78, 0x12, 0x51, 0x0a, 0x05, 0x44, 0x63, 0x51, 0x63, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x63, 0x71, 0x63, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x23, 0xca, 0xb5, 0x03,
	0x1f, 0xa2, 0x01, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x63, 0x71, 0x63, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x05, 0x44, 0x63, 0x51, 0x63, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x76,
	0x51, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x70, 0x54, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x52, 0x65, 0x73, 0x70, 0x54, 0x78, 0x12, 0x65, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x70, 0x52, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x2f, 0xca, 0xb5, 0x03,
	0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x78, 0x12, 0x51, 0x0a, 0x05, 0x44, 0x63, 0x51, 0x63, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x63, 0x71, 0x63, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x23, 0xca, 0xb5, 0x03,
	0x1f, 0xa2, 0x01, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x63, 0x71, 0x63, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x05, 0x44, 0x63, 0x51, 0x63, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x51, 0x50, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x02, 0x53, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x51, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01, 0x1b,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x53, 0x71, 0x12,
	0x4d, 0x0a, 0x02, 0x52, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69,
	0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x51, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x25, 0xca, 0xb5, 0x03, 0x21, 0xa2, 0x01, 0x1e, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x52, 0x71, 0x22, 0x39,
	0x0a, 0x0b, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2,
	0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x51, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x1c, 0xca, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x70, 0x65, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x22, 0xca, 0xb5, 0x03, 0x1e, 0xa2, 0x01,
	0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x66, 0x51, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42, 0x1c, 0xca, 0xb5, 0x03, 0x18, 0xa2,
	0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x70, 0x65, 0x63, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a,
	0x0b, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x22, 0xca, 0xb5, 0x03,
	0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0b, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x0a, 0x4e, 0x69, 0x63, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x07, 0x4c, 0x69, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x66, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c,
	0x69, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x4c,
	0x69, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x0b, 0x52, 0x64, 0x6d, 0x61, 0x51, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x4e, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x4e, 0x69, 0x63, 0x51, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b,
	0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x69, 0x63,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x4e, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x63, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nic_proto_rawDescOnce sync.Once
	file_nic_proto_rawDescData = file_nic_proto_rawDesc
)

func file_nic_proto_rawDescGZIP() []byte {
	file_nic_proto_rawDescOnce.Do(func() {
		file_nic_proto_rawDescData = protoimpl.X.CompressGZIP(file_nic_proto_rawDescData)
	})
	return file_nic_proto_rawDescData
}

var file_nic_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_nic_proto_goTypes = []any{
	(*PortStats)(nil),        // 0: nicmetrics.PortStats
	(*NICPortStats)(nil),     // 1: nicmetrics.NICPortStats
	(*PortStatsList)(nil),    // 2: nicmetrics.PortStatsList
	(*LifStatsFields)(nil),   // 3: nicmetrics.LifStatsFields
	(*LifStatsSpec)(nil),     // 4: nicmetrics.LifStatsSpec
	(*LifStats)(nil),         // 5: nicmetrics.LifStats
	(*NICLifStats)(nil),      // 6: nicmetrics.NICLifStats
	(*LifStatsList)(nil),     // 7: nicmetrics.LifStatsList
	(*DcqcnStats)(nil),       // 8: nicmetrics.DcqcnStats
	(*RequesterTxStats)(nil), // 9: nicmetrics.RequesterTxStats
	(*RequesterRxStats)(nil), // 10: nicmetrics.RequesterRxStats
	(*ResponderTxStats)(nil), // 11: nicmetrics.ResponderTxStats
	(*ResponderRxStats)(nil), // 12: nicmetrics.ResponderRxStats
	(*SendQStats)(nil),       // 13: nicmetrics.SendQStats
	(*RecvQStats)(nil),       // 14: nicmetrics.RecvQStats
	(*QPStats)(nil),          // 15: nicmetrics.QPStats
	(*QPStatsSpec)(nil),      // 16: nicmetrics.QPStatsSpec
	(*QPStatsInfo)(nil),      // 17: nicmetrics.QPStatsInfo
	(*LifQPStats)(nil),       // 18: nicmetrics.LifQPStats
	(*NicQPStats)(nil),       // 19: nicmetrics.NicQPStats
	(*RdmaQPStats)(nil),      // 20: nicmetrics.RdmaQPStats
}
var file_nic_proto_depIdxs = []int32{
	0,  // 0: nicmetrics.NICPortStats.Port:type_name -> nicmetrics.PortStats
	1,  // 1: nicmetrics.PortStatsList.NIC:type_name -> nicmetrics.NICPortStats
	4,  // 2: nicmetrics.LifStats.Spec:type_name -> nicmetrics.LifStatsSpec
	3,  // 3: nicmetrics.LifStats.Statistics:type_name -> nicmetrics.LifStatsFields
	5,  // 4: nicmetrics.NICLifStats.Lif:type_name -> nicmetrics.LifStats
	6,  // 5: nicmetrics.LifStatsList.NIC:type_name -> nicmetrics.NICLifStats
	9,  // 6: nicmetrics.SendQStats.ReqTx:type_name -> nicmetrics.RequesterTxStats
	10, // 7: nicmetrics.SendQStats.ReqRx:type_name -> nicmetrics.RequesterRxStats
	8,  // 8: nicmetrics.SendQStats.DcQcn:type_name -> nicmetrics.DcqcnStats
	11, // 9: nicmetrics.RecvQStats.RespTx:type_name -> nicmetrics.ResponderTxStats
	12, // 10: nicmetrics.RecvQStats.RespRx:type_name -> nicmetrics.ResponderRxStats
	8,  // 11: nicmetrics.RecvQStats.DcQcn:type_name -> nicmetrics.DcqcnStats
	13, // 12: nicmetrics.QPStats.Sq:type_name -> nicmetrics.SendQStats
	14, // 13: nicmetrics.QPStats.Rq:type_name -> nicmetrics.RecvQStats
	16, // 14: nicmetrics.QPStatsInfo.Spec:type_name -> nicmetrics.QPStatsSpec
	15, // 15: nicmetrics.QPStatsInfo.Stats:type_name -> nicmetrics.QPStats
	16, // 16: nicmetrics.LifQPStats.Spec:type_name -> nicmetrics.QPStatsSpec
	17, // 17: nicmetrics.LifQPStats.QPStatsList:type_name -> nicmetrics.QPStatsInfo
	18, // 18: nicmetrics.NicQPStats.LifList:type_name -> nicmetrics.LifQPStats
	19, // 19: nicmetrics.RdmaQPStats.NicList:type_name -> nicmetrics.NicQPStats
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_nic_proto_init() }
func file_nic_proto_init() {
	if File_nic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nic_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NICPortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PortStatsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LifStatsFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LifStatsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LifStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NICLifStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LifStatsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DcqcnStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RequesterTxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RequesterRxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ResponderTxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ResponderRxStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SendQStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RecvQStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*QPStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*QPStatsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*QPStatsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LifQPStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*NicQPStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RdmaQPStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nic_proto_goTypes,
		DependencyIndexes: file_nic_proto_depIdxs,
		MessageInfos:      file_nic_proto_msgTypes,
	}.Build()
	File_nic_proto = out.File
	file_nic_proto_rawDesc = nil
	file_nic_proto_goTypes = nil
	file_nic_proto_depIdxs = nil
}
