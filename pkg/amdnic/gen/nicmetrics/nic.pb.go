//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD AI NIC Port Metrics
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: nic.proto

package nicmetrics

import (
	_ "github.com/alta/protopatch/patch/gopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PortStats represents the statistics of an individual port, identified by a unique ID.
type PortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the port
	ID                      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	FRAMES_RX_BAD_FCS       string `protobuf:"bytes,2,opt,name=FRAMES_RX_BAD_FCS,json=FRAMESRXBADFCS,proto3" json:"FRAMES_RX_BAD_FCS,omitempty"`
	FRAMES_RX_BAD_ALL       string `protobuf:"bytes,3,opt,name=FRAMES_RX_BAD_ALL,json=FRAMESRXBADALL,proto3" json:"FRAMES_RX_BAD_ALL,omitempty"`
	FRAMES_RX_PAUSE         string `protobuf:"bytes,4,opt,name=FRAMES_RX_PAUSE,json=FRAMESRXPAUSE,proto3" json:"FRAMES_RX_PAUSE,omitempty"`
	FRAMES_RX_BAD_LENGTH    string `protobuf:"bytes,5,opt,name=FRAMES_RX_BAD_LENGTH,json=FRAMESRXBADLENGTH,proto3" json:"FRAMES_RX_BAD_LENGTH,omitempty"`
	FRAMES_RX_UNDERSIZED    string `protobuf:"bytes,6,opt,name=FRAMES_RX_UNDERSIZED,json=FRAMESRXUNDERSIZED,proto3" json:"FRAMES_RX_UNDERSIZED,omitempty"`
	FRAMES_RX_OVERSIZED     string `protobuf:"bytes,7,opt,name=FRAMES_RX_OVERSIZED,json=FRAMESRXOVERSIZED,proto3" json:"FRAMES_RX_OVERSIZED,omitempty"`
	FRAMES_RX_FRAGMENTS     string `protobuf:"bytes,8,opt,name=FRAMES_RX_FRAGMENTS,json=FRAMESRXFRAGMENTS,proto3" json:"FRAMES_RX_FRAGMENTS,omitempty"`
	FRAMES_RX_JABBER        string `protobuf:"bytes,9,opt,name=FRAMES_RX_JABBER,json=FRAMESRXJABBER,proto3" json:"FRAMES_RX_JABBER,omitempty"`
	FRAMES_RX_PRIPAUSE      string `protobuf:"bytes,10,opt,name=FRAMES_RX_PRIPAUSE,json=FRAMESRXPRIPAUSE,proto3" json:"FRAMES_RX_PRIPAUSE,omitempty"`
	FRAMES_RX_STOMPED_CRC   string `protobuf:"bytes,11,opt,name=FRAMES_RX_STOMPED_CRC,json=FRAMESRXSTOMPEDCRC,proto3" json:"FRAMES_RX_STOMPED_CRC,omitempty"`
	FRAMES_RX_TOO_LONG      string `protobuf:"bytes,12,opt,name=FRAMES_RX_TOO_LONG,json=FRAMESRXTOOLONG,proto3" json:"FRAMES_RX_TOO_LONG,omitempty"`
	FRAMES_RX_DROPPED       string `protobuf:"bytes,13,opt,name=FRAMES_RX_DROPPED,json=FRAMESRXDROPPED,proto3" json:"FRAMES_RX_DROPPED,omitempty"`
	FRAMES_TX_BAD           string `protobuf:"bytes,14,opt,name=FRAMES_TX_BAD,json=FRAMESTXBAD,proto3" json:"FRAMES_TX_BAD,omitempty"`
	FRAMES_TX_PAUSE         string `protobuf:"bytes,15,opt,name=FRAMES_TX_PAUSE,json=FRAMESTXPAUSE,proto3" json:"FRAMES_TX_PAUSE,omitempty"`
	FRAMES_TX_PRIPAUSE      string `protobuf:"bytes,16,opt,name=FRAMES_TX_PRIPAUSE,json=FRAMESTXPRIPAUSE,proto3" json:"FRAMES_TX_PRIPAUSE,omitempty"`
	FRAMES_TX_LESS_THAN_64B string `protobuf:"bytes,17,opt,name=FRAMES_TX_LESS_THAN_64B,json=FRAMESTXLESSTHAN64B,proto3" json:"FRAMES_TX_LESS_THAN_64B,omitempty"`
	FRAMES_TX_TRUNCATED     string `protobuf:"bytes,18,opt,name=FRAMES_TX_TRUNCATED,json=FRAMESTXTRUNCATED,proto3" json:"FRAMES_TX_TRUNCATED,omitempty"`
	RSFEC_CORRECTABLE_WORD  string `protobuf:"bytes,19,opt,name=RSFEC_CORRECTABLE_WORD,json=RSFECCORRECTABLEWORD,proto3" json:"RSFEC_CORRECTABLE_WORD,omitempty"`
	RSFEC_CH_SYMBOL_ERR_CNT string `protobuf:"bytes,20,opt,name=RSFEC_CH_SYMBOL_ERR_CNT,json=RSFECCHSYMBOLERRCNT,proto3" json:"RSFEC_CH_SYMBOL_ERR_CNT,omitempty"`
}

func (x *PortStats) Reset() {
	*x = PortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStats) ProtoMessage() {}

func (x *PortStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStats.ProtoReflect.Descriptor instead.
func (*PortStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{0}
}

func (x *PortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_FCS() string {
	if x != nil {
		return x.FRAMES_RX_BAD_FCS
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_ALL() string {
	if x != nil {
		return x.FRAMES_RX_BAD_ALL
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_PAUSE() string {
	if x != nil {
		return x.FRAMES_RX_PAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_BAD_LENGTH() string {
	if x != nil {
		return x.FRAMES_RX_BAD_LENGTH
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_UNDERSIZED() string {
	if x != nil {
		return x.FRAMES_RX_UNDERSIZED
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_OVERSIZED() string {
	if x != nil {
		return x.FRAMES_RX_OVERSIZED
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_FRAGMENTS() string {
	if x != nil {
		return x.FRAMES_RX_FRAGMENTS
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_JABBER() string {
	if x != nil {
		return x.FRAMES_RX_JABBER
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_PRIPAUSE() string {
	if x != nil {
		return x.FRAMES_RX_PRIPAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_STOMPED_CRC() string {
	if x != nil {
		return x.FRAMES_RX_STOMPED_CRC
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_TOO_LONG() string {
	if x != nil {
		return x.FRAMES_RX_TOO_LONG
	}
	return ""
}

func (x *PortStats) GetFRAMES_RX_DROPPED() string {
	if x != nil {
		return x.FRAMES_RX_DROPPED
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_BAD() string {
	if x != nil {
		return x.FRAMES_TX_BAD
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_PAUSE() string {
	if x != nil {
		return x.FRAMES_TX_PAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_PRIPAUSE() string {
	if x != nil {
		return x.FRAMES_TX_PRIPAUSE
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_LESS_THAN_64B() string {
	if x != nil {
		return x.FRAMES_TX_LESS_THAN_64B
	}
	return ""
}

func (x *PortStats) GetFRAMES_TX_TRUNCATED() string {
	if x != nil {
		return x.FRAMES_TX_TRUNCATED
	}
	return ""
}

func (x *PortStats) GetRSFEC_CORRECTABLE_WORD() string {
	if x != nil {
		return x.RSFEC_CORRECTABLE_WORD
	}
	return ""
}

func (x *PortStats) GetRSFEC_CH_SYMBOL_ERR_CNT() string {
	if x != nil {
		return x.RSFEC_CH_SYMBOL_ERR_CNT
	}
	return ""
}

// NICPortStats represents a collection of port statistics grouped by NIC ID.
// This allows statistics to be organized by Network Interface Cards (NICs).
type NICPortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of PortStats, each representing statistics for an individual port on this NIC.
	Port []*PortStats `protobuf:"bytes,2,rep,name=Port,proto3" json:"port,omitempty"`
}

func (x *NICPortStats) Reset() {
	*x = NICPortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICPortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICPortStats) ProtoMessage() {}

func (x *NICPortStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICPortStats.ProtoReflect.Descriptor instead.
func (*NICPortStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{1}
}

func (x *NICPortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NICPortStats) GetPort() []*PortStats {
	if x != nil {
		return x.Port
	}
	return nil
}

// PortStatsList represents a list of AI NIC port statistics. This is typically used to store statistics
// for multiple NICs in a system, where each NIC has its associated ports with statistics.
type PortStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of NICPortStats, each representing statistics for a particular NIC.
	NIC []*NICPortStats `protobuf:"bytes,1,rep,name=NIC,proto3" json:"nic,omitempty"`
}

func (x *PortStatsList) Reset() {
	*x = PortStatsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatsList) ProtoMessage() {}

func (x *PortStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatsList.ProtoReflect.Descriptor instead.
func (*PortStatsList) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{2}
}

func (x *PortStatsList) GetNIC() []*NICPortStats {
	if x != nil {
		return x.NIC
	}
	return nil
}

// Stats represents a single statistical metric, such as bytes transmitted, packets received, etc.
type LStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the statistic (e.g., "Rx unicast bytes")
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name,omitempty"`
	// The value of the statistic (e.g., "18409")
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"value,omitempty"`
}

func (x *LStats) Reset() {
	*x = LStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LStats) ProtoMessage() {}

func (x *LStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LStats.ProtoReflect.Descriptor instead.
func (*LStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{3}
}

func (x *LStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LStats) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// LifStats represents statistics for a particular logical interface (LIF) on a NIC (Network Interface Card).
type LifStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the logical interface (LIF) on the NIC
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of statistics for this particular LIF.
	// Each statistic could represent something like "Rx unicast bytes" or "Tx multicast packets".
	Statistics []*LStats `protobuf:"bytes,2,rep,name=Statistics,proto3" json:"statistics,omitempty"`
}

func (x *LifStats) Reset() {
	*x = LifStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStats) ProtoMessage() {}

func (x *LifStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStats.ProtoReflect.Descriptor instead.
func (*LifStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{4}
}

func (x *LifStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *LifStats) GetStatistics() []*LStats {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// NICLifStats represents statistics for a specific NIC (Network Interface Card) and its associated LIFs.
type NICLifStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC (Network Interface Card)
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of LifStats, where each item represents statistics for a specific LIF under this NIC.
	Lif []*LifStats `protobuf:"bytes,2,rep,name=Lif,proto3" json:"lif,omitempty"`
}

func (x *NICLifStats) Reset() {
	*x = NICLifStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICLifStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICLifStats) ProtoMessage() {}

func (x *NICLifStats) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICLifStats.ProtoReflect.Descriptor instead.
func (*NICLifStats) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{5}
}

func (x *NICLifStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NICLifStats) GetLif() []*LifStats {
	if x != nil {
		return x.Lif
	}
	return nil
}

// LifStatsList represents a collection of NICLifStats, allowing to manage statistics for multiple NICs.
type LifStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of NICLifStats, where each item represents the statistics for a NIC and its associated LIFs.
	NIC []*NICLifStats `protobuf:"bytes,1,rep,name=NIC,proto3" json:"nic,omitempty"`
}

func (x *LifStatsList) Reset() {
	*x = LifStatsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifStatsList) ProtoMessage() {}

func (x *LifStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_nic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifStatsList.ProtoReflect.Descriptor instead.
func (*LifStatsList) Descriptor() ([]byte, []int) {
	return file_nic_proto_rawDescGZIP(), []int{6}
}

func (x *LifStatsList) GetNIC() []*NICLifStats {
	if x != nil {
		return x.NIC
	}
	return nil
}

var File_nic_proto protoreflect.FileDescriptor

var file_nic_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x69, 0x63,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf4, 0x0d, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5,
	0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x11,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x43,
	0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x46, 0x43, 0x53, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x42, 0x41, 0x44, 0x46,
	0x43, 0x53, 0x12, 0x54, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca,
	0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x52, 0x58, 0x42, 0x41, 0x44, 0x41, 0x4c, 0x4c, 0x12, 0x4f, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xca, 0xb5, 0x03, 0x23, 0xa2, 0x01, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x52, 0x58, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x5d, 0x0a, 0x14, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x42,
	0x41, 0x44, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x12, 0x5e, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x4f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x5a, 0x45, 0x44, 0x12, 0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x52, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x12, 0x52, 0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xca, 0xb5,
	0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58,
	0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x12, 0x58, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x12, 0x60, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54,
	0x4f, 0x4d, 0x50, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x45, 0x44, 0x5f,
	0x43, 0x52, 0x43, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x12,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x45, 0x44, 0x43,
	0x52, 0x43, 0x12, 0x57, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x52, 0x58, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x12, 0x55, 0x0a, 0x11, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x52, 0x58, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x12, 0x49, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xca, 0xb5, 0x03, 0x21, 0xa2,
	0x01, 0x1e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54,
	0x58, 0x5f, 0x42, 0x41, 0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58, 0x42, 0x41, 0x44, 0x12, 0x4f, 0x0a,
	0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xca, 0xb5, 0x03, 0x23, 0xa2, 0x01, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x58,
	0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26,
	0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x58,
	0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x12, 0x65, 0x0a, 0x17, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x36, 0x34, 0x42, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2,
	0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54,
	0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x34, 0x42, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x54, 0x58, 0x4c, 0x45, 0x53, 0x53, 0x54, 0x48, 0x41, 0x4e, 0x36, 0x34, 0x42, 0x12,
	0x5b, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xca, 0xb5,
	0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x54, 0x58, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x64, 0x0a, 0x16,
	0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xca, 0xb5,
	0x03, 0x2a, 0xa2, 0x01, 0x27, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x52, 0x53, 0x46, 0x45, 0x43,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x44, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x53,
	0x46, 0x45, 0x43, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x57, 0x4f,
	0x52, 0x44, 0x12, 0x65, 0x0a, 0x17, 0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x53, 0x46, 0x45, 0x43, 0x43, 0x48, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x45, 0x52, 0x52, 0x43, 0x4e, 0x54, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4e, 0x49,
	0x43, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1c, 0xca, 0xb5, 0x03,
	0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x58, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x49, 0x43, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x69, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4e, 0x49, 0x43, 0x22, 0x6f, 0x0a, 0x06, 0x4c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xca, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xca, 0xb5, 0x03, 0x19, 0xa2, 0x01, 0x16, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x4c,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x22, 0xca, 0xb5, 0x03,
	0x1e, 0xa2, 0x01, 0x1b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x7e, 0x0a, 0x0b, 0x4e,
	0x49, 0x43, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x03, 0x4c, 0x69, 0x66, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2,
	0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x69, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4c, 0x69, 0x66, 0x22, 0x56, 0x0a, 0x0c, 0x4c,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x03, 0x4e,
	0x49, 0x43, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x49, 0x43, 0x4c, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x1b, 0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6e, 0x69, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03,
	0x4e, 0x49, 0x43, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x63, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nic_proto_rawDescOnce sync.Once
	file_nic_proto_rawDescData = file_nic_proto_rawDesc
)

func file_nic_proto_rawDescGZIP() []byte {
	file_nic_proto_rawDescOnce.Do(func() {
		file_nic_proto_rawDescData = protoimpl.X.CompressGZIP(file_nic_proto_rawDescData)
	})
	return file_nic_proto_rawDescData
}

var file_nic_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_nic_proto_goTypes = []any{
	(*PortStats)(nil),     // 0: nicmetrics.PortStats
	(*NICPortStats)(nil),  // 1: nicmetrics.NICPortStats
	(*PortStatsList)(nil), // 2: nicmetrics.PortStatsList
	(*LStats)(nil),        // 3: nicmetrics.LStats
	(*LifStats)(nil),      // 4: nicmetrics.LifStats
	(*NICLifStats)(nil),   // 5: nicmetrics.NICLifStats
	(*LifStatsList)(nil),  // 6: nicmetrics.LifStatsList
}
var file_nic_proto_depIdxs = []int32{
	0, // 0: nicmetrics.NICPortStats.Port:type_name -> nicmetrics.PortStats
	1, // 1: nicmetrics.PortStatsList.NIC:type_name -> nicmetrics.NICPortStats
	3, // 2: nicmetrics.LifStats.Statistics:type_name -> nicmetrics.LStats
	4, // 3: nicmetrics.NICLifStats.Lif:type_name -> nicmetrics.LifStats
	5, // 4: nicmetrics.LifStatsList.NIC:type_name -> nicmetrics.NICLifStats
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_nic_proto_init() }
func file_nic_proto_init() {
	if File_nic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nic_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NICPortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PortStatsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LifStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NICLifStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nic_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*LifStatsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nic_proto_goTypes,
		DependencyIndexes: file_nic_proto_depIdxs,
		MessageInfos:      file_nic_proto_msgTypes,
	}.Build()
	File_nic_proto = out.File
	file_nic_proto_rawDesc = nil
	file_nic_proto_goTypes = nil
	file_nic_proto_depIdxs = nil
}
