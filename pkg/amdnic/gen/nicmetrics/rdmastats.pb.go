//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD NIC RDMA  Metrics
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: rdmastats.proto

package nicmetrics

import (
	_ "github.com/alta/protopatch/patch/gopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RDMAStats represents the statistics of RDMA link, identified by a unique ifname.
type RDMAStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the rdma link
	IFNAME                         string `protobuf:"bytes,1,opt,name=IFNAME,proto3" json:"ifname,omitempty"`
	PORT                           uint32 `protobuf:"varint,2,opt,name=PORT,proto3" json:"port,omitempty"`
	RDMA_TX_UCAST_PKTS             uint64 `protobuf:"varint,3,opt,name=RDMA_TX_UCAST_PKTS,json=RDMATXUCASTPKTS,proto3" json:"tx_rdma_ucast_pkts,omitempty"`
	RDMA_TX_CNP_PKTS               uint64 `protobuf:"varint,4,opt,name=RDMA_TX_CNP_PKTS,json=RDMATXCNPPKTS,proto3" json:"tx_rdma_cnp_pkts,omitempty"`
	RDMA_RX_UCAST_PKTS             uint64 `protobuf:"varint,5,opt,name=RDMA_RX_UCAST_PKTS,json=RDMARXUCASTPKTS,proto3" json:"rx_rdma_ucast_pkts,omitempty"`
	RDMA_RX_CNP_PKTS               uint64 `protobuf:"varint,6,opt,name=RDMA_RX_CNP_PKTS,json=RDMARXCNPPKTS,proto3" json:"rx_rdma_cnp_pkts,omitempty"`
	RDMA_RX_ECN_PKTS               uint64 `protobuf:"varint,7,opt,name=RDMA_RX_ECN_PKTS,json=RDMARXECNPKTS,proto3" json:"rx_rdma_ecn_pkts,omitempty"`
	RDMA_REQ_RX_PKT_SEQ_ERR        uint64 `protobuf:"varint,8,opt,name=RDMA_REQ_RX_PKT_SEQ_ERR,json=RDMAREQRXPKTSEQERR,proto3" json:"req_rx_pkt_seq_err,omitempty"`
	RDMA_REQ_RX_RNR_RETRY_ERR      uint64 `protobuf:"varint,9,opt,name=RDMA_REQ_RX_RNR_RETRY_ERR,json=RDMAREQRXRNRRETRYERR,proto3" json:"req_rx_rnr_retry_err,omitempty"`
	RDMA_REQ_RX_RMT_ACC_ERR        uint64 `protobuf:"varint,10,opt,name=RDMA_REQ_RX_RMT_ACC_ERR,json=RDMAREQRXRMTACCERR,proto3" json:"req_rx_rmt_acc_err,omitempty"`
	RDMA_REQ_RX_RMT_REQ_ERR        uint64 `protobuf:"varint,11,opt,name=RDMA_REQ_RX_RMT_REQ_ERR,json=RDMAREQRXRMTREQERR,proto3" json:"req_rx_rmt_req_err,omitempty"`
	RDMA_REQ_RX_OPER_ERR           uint64 `protobuf:"varint,12,opt,name=RDMA_REQ_RX_OPER_ERR,json=RDMAREQRXOPERERR,proto3" json:"req_rx_oper_err,omitempty"`
	RDMA_REQ_RX_IMPL_NAK_SEQ_ERR   uint64 `protobuf:"varint,13,opt,name=RDMA_REQ_RX_IMPL_NAK_SEQ_ERR,json=RDMAREQRXIMPLNAKSEQERR,proto3" json:"req_rx_impl_nak_seq_err,omitempty"`
	RDMA_REQ_RX_CQE_ERR            uint64 `protobuf:"varint,14,opt,name=RDMA_REQ_RX_CQE_ERR,json=RDMAREQRXCQEERR,proto3" json:"req_rx_cqe_err,omitempty"`
	RDMA_REQ_RX_CQE_FLUSH          uint64 `protobuf:"varint,15,opt,name=RDMA_REQ_RX_CQE_FLUSH,json=RDMAREQRXCQEFLUSH,proto3" json:"req_rx_cqe_flush,omitempty"`
	RDMA_REQ_RX_DUP_RESP           uint64 `protobuf:"varint,16,opt,name=RDMA_REQ_RX_DUP_RESP,json=RDMAREQRXDUPRESP,proto3" json:"req_rx_dup_response,omitempty"`
	RDMA_REQ_RX_INVALID_PKTS       uint64 `protobuf:"varint,17,opt,name=RDMA_REQ_RX_INVALID_PKTS,json=RDMAREQRXINVALIDPKTS,proto3" json:"req_rx_inval_pkts,omitempty"`
	RDMA_REQ_TX_LOC_ERR            uint64 `protobuf:"varint,18,opt,name=RDMA_REQ_TX_LOC_ERR,json=RDMAREQTXLOCERR,proto3" json:"req_tx_loc_acc_err,omitempty"`
	RDMA_REQ_TX_LOC_OPER_ERR       uint64 `protobuf:"varint,19,opt,name=RDMA_REQ_TX_LOC_OPER_ERR,json=RDMAREQTXLOCOPERERR,proto3" json:"req_tx_loc_oper_err,omitempty"`
	RDMA_REQ_TX_MEM_MGMT_ERR       uint64 `protobuf:"varint,20,opt,name=RDMA_REQ_TX_MEM_MGMT_ERR,json=RDMAREQTXMEMMGMTERR,proto3" json:"req_tx_mem_mgmt_err,omitempty"`
	RDMA_REQ_TX_RETRY_EXCD_ERR     uint64 `protobuf:"varint,21,opt,name=RDMA_REQ_TX_RETRY_EXCD_ERR,json=RDMAREQTXRETRYEXCDERR,proto3" json:"req_tx_retry_excd_err,omitempty"`
	RDMA_REQ_TX_LOC_SGL_INV_ERR    uint64 `protobuf:"varint,22,opt,name=RDMA_REQ_TX_LOC_SGL_INV_ERR,json=RDMAREQTXLOCSGLINVERR,proto3" json:"req_tx_loc_sgl_inv_err,omitempty"`
	RDMA_RESP_RX_DUP_REQUEST       uint64 `protobuf:"varint,23,opt,name=RDMA_RESP_RX_DUP_REQUEST,json=RDMARESPRXDUPREQUEST,proto3" json:"resp_rx_dup_request,omitempty"`
	RDMA_RESP_RX_OUTOF_BUF         uint64 `protobuf:"varint,24,opt,name=RDMA_RESP_RX_OUTOF_BUF,json=RDMARESPRXOUTOFBUF,proto3" json:"resp_rx_outof_buf,omitempty"`
	RDMA_RESP_RX_OUTOUF_SEQ        uint64 `protobuf:"varint,25,opt,name=RDMA_RESP_RX_OUTOUF_SEQ,json=RDMARESPRXOUTOUFSEQ,proto3" json:"resp_rx_outouf_seq,omitempty"`
	RDMA_RESP_RX_CQE_ERR           uint64 `protobuf:"varint,26,opt,name=RDMA_RESP_RX_CQE_ERR,json=RDMARESPRXCQEERR,proto3" json:"resp_rx_cqe_err,omitempty"`
	RDMA_RESP_RX_CQE_FLUSH         uint64 `protobuf:"varint,27,opt,name=RDMA_RESP_RX_CQE_FLUSH,json=RDMARESPRXCQEFLUSH,proto3" json:"resp_rx_cqe_flush,omitempty"`
	RDMA_RESP_RX_LOC_LEN_ERR       uint64 `protobuf:"varint,28,opt,name=RDMA_RESP_RX_LOC_LEN_ERR,json=RDMARESPRXLOCLENERR,proto3" json:"resp_rx_loc_len_err,omitempty"`
	RDMA_RESP_RX_INVALID_REQUEST   uint64 `protobuf:"varint,29,opt,name=RDMA_RESP_RX_INVALID_REQUEST,json=RDMARESPRXINVALIDREQUEST,proto3" json:"resp_rx_inval_request,omitempty"`
	RDMA_RESP_RX_LOC_OPER_ERR      uint64 `protobuf:"varint,30,opt,name=RDMA_RESP_RX_LOC_OPER_ERR,json=RDMARESPRXLOCOPERERR,proto3" json:"resp_rx_loc_oper_err,omitempty"`
	RDMA_RESP_RX_OUTOF_ATOMIC      uint64 `protobuf:"varint,31,opt,name=RDMA_RESP_RX_OUTOF_ATOMIC,json=RDMARESPRXOUTOFATOMIC,proto3" json:"resp_rx_outof_atomic,omitempty"`
	RDMA_RESP_TX_PKT_SEQ_ERR       uint64 `protobuf:"varint,32,opt,name=RDMA_RESP_TX_PKT_SEQ_ERR,json=RDMARESPTXPKTSEQERR,proto3" json:"resp_tx_pkt_seq_err,omitempty"`
	RDMA_RESP_TX_RMT_INVAL_REQ_ERR uint64 `protobuf:"varint,33,opt,name=RDMA_RESP_TX_RMT_INVAL_REQ_ERR,json=RDMARESPTXRMTINVALREQERR,proto3" json:"resp_tx_rmt_inval_req_err,omitempty"`
	RDMA_RESP_TX_RMT_ACC_ERR       uint64 `protobuf:"varint,34,opt,name=RDMA_RESP_TX_RMT_ACC_ERR,json=RDMARESPTXRMTACCERR,proto3" json:"resp_tx_rmt_acc_err,omitempty"`
	RDMA_RESP_TX_RMT_OPER_ERR      uint64 `protobuf:"varint,35,opt,name=RDMA_RESP_TX_RMT_OPER_ERR,json=RDMARESPTXRMTOPERERR,proto3" json:"resp_tx_rmt_oper_err,omitempty"`
	RDMA_RESP_TX_RNR_RETRY_ERR     uint64 `protobuf:"varint,36,opt,name=RDMA_RESP_TX_RNR_RETRY_ERR,json=RDMARESPTXRNRRETRYERR,proto3" json:"resp_tx_rnr_retry_err,omitempty"`
	RDMA_RESP_TX_LOC_SGL_INV_ERR   uint64 `protobuf:"varint,37,opt,name=RDMA_RESP_TX_LOC_SGL_INV_ERR,json=RDMARESPTXLOCSGLINVERR,proto3" json:"resp_tx_loc_sgl_inv_err,omitempty"`
	RDMA_RESP_RX_S0_TABLE_ERR      uint64 `protobuf:"varint,38,opt,name=RDMA_RESP_RX_S0_TABLE_ERR,json=RDMARESPRXS0TABLEERR,proto3" json:"resp_rx_s0_table_err,omitempty"`
}

func (x *RDMAStats) Reset() {
	*x = RDMAStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdmastats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDMAStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDMAStats) ProtoMessage() {}

func (x *RDMAStats) ProtoReflect() protoreflect.Message {
	mi := &file_rdmastats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDMAStats.ProtoReflect.Descriptor instead.
func (*RDMAStats) Descriptor() ([]byte, []int) {
	return file_rdmastats_proto_rawDescGZIP(), []int{0}
}

func (x *RDMAStats) GetIFNAME() string {
	if x != nil {
		return x.IFNAME
	}
	return ""
}

func (x *RDMAStats) GetPORT() uint32 {
	if x != nil {
		return x.PORT
	}
	return 0
}

func (x *RDMAStats) GetRDMA_TX_UCAST_PKTS() uint64 {
	if x != nil {
		return x.RDMA_TX_UCAST_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_TX_CNP_PKTS() uint64 {
	if x != nil {
		return x.RDMA_TX_CNP_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RX_UCAST_PKTS() uint64 {
	if x != nil {
		return x.RDMA_RX_UCAST_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RX_CNP_PKTS() uint64 {
	if x != nil {
		return x.RDMA_RX_CNP_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RX_ECN_PKTS() uint64 {
	if x != nil {
		return x.RDMA_RX_ECN_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_PKT_SEQ_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_PKT_SEQ_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_RNR_RETRY_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_RNR_RETRY_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_RMT_ACC_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_RMT_ACC_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_RMT_REQ_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_RMT_REQ_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_OPER_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_OPER_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_IMPL_NAK_SEQ_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_IMPL_NAK_SEQ_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_CQE_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_CQE_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_CQE_FLUSH() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_CQE_FLUSH
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_DUP_RESP() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_DUP_RESP
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_RX_INVALID_PKTS() uint64 {
	if x != nil {
		return x.RDMA_REQ_RX_INVALID_PKTS
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_TX_LOC_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_TX_LOC_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_TX_LOC_OPER_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_TX_LOC_OPER_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_TX_MEM_MGMT_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_TX_MEM_MGMT_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_TX_RETRY_EXCD_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_TX_RETRY_EXCD_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_REQ_TX_LOC_SGL_INV_ERR() uint64 {
	if x != nil {
		return x.RDMA_REQ_TX_LOC_SGL_INV_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_DUP_REQUEST() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_DUP_REQUEST
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_OUTOF_BUF() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_OUTOF_BUF
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_OUTOUF_SEQ() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_OUTOUF_SEQ
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_CQE_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_CQE_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_CQE_FLUSH() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_CQE_FLUSH
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_LOC_LEN_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_LOC_LEN_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_INVALID_REQUEST() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_INVALID_REQUEST
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_LOC_OPER_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_LOC_OPER_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_OUTOF_ATOMIC() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_OUTOF_ATOMIC
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_PKT_SEQ_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_PKT_SEQ_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_RMT_INVAL_REQ_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_RMT_INVAL_REQ_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_RMT_ACC_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_RMT_ACC_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_RMT_OPER_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_RMT_OPER_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_RNR_RETRY_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_RNR_RETRY_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_TX_LOC_SGL_INV_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_TX_LOC_SGL_INV_ERR
	}
	return 0
}

func (x *RDMAStats) GetRDMA_RESP_RX_S0_TABLE_ERR() uint64 {
	if x != nil {
		return x.RDMA_RESP_RX_S0_TABLE_ERR
	}
	return 0
}

var File_rdmastats_proto protoreflect.FileDescriptor

var file_rdmastats_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x64, 0x6d, 0x61, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x74, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x1c, 0x0a, 0x09, 0x52, 0x44, 0x4d,
	0x41, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x49, 0x46, 0x4e, 0x41, 0x4d, 0x45,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xca, 0xb5, 0x03, 0x1a, 0xa2, 0x01, 0x17, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x49, 0x46, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x30,
	0x0a, 0x04, 0x50, 0x4f, 0x52, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xca, 0xb5,
	0x03, 0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x50, 0x4f, 0x52, 0x54,
	0x12, 0x57, 0x0a, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x54, 0x58, 0x5f, 0x55, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5,
	0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x78, 0x5f, 0x72, 0x64,
	0x6d, 0x61, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x52, 0x44, 0x4d, 0x41, 0x54, 0x58,
	0x55, 0x43, 0x41, 0x53, 0x54, 0x50, 0x4b, 0x54, 0x53, 0x12, 0x51, 0x0a, 0x10, 0x52, 0x44, 0x4d,
	0x41, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x4e, 0x50, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x28, 0xca, 0xb5, 0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x74, 0x78, 0x5f, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x63, 0x6e, 0x70, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x52,
	0x44, 0x4d, 0x41, 0x54, 0x58, 0x43, 0x4e, 0x50, 0x50, 0x4b, 0x54, 0x53, 0x12, 0x57, 0x0a, 0x12,
	0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01,
	0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78, 0x5f, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x75,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x58, 0x55, 0x43, 0x41, 0x53,
	0x54, 0x50, 0x4b, 0x54, 0x53, 0x12, 0x51, 0x0a, 0x10, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x58,
	0x5f, 0x43, 0x4e, 0x50, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x28, 0xca, 0xb5, 0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x78,
	0x5f, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x63, 0x6e, 0x70, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x52, 0x44, 0x4d, 0x41, 0x52,
	0x58, 0x43, 0x4e, 0x50, 0x50, 0x4b, 0x54, 0x53, 0x12, 0x51, 0x0a, 0x10, 0x52, 0x44, 0x4d, 0x41,
	0x5f, 0x52, 0x58, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x28, 0xca, 0xb5, 0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x78, 0x5f, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x52, 0x44,
	0x4d, 0x41, 0x52, 0x58, 0x45, 0x43, 0x4e, 0x50, 0x4b, 0x54, 0x53, 0x12, 0x5f, 0x0a, 0x17, 0x52,
	0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x53,
	0x45, 0x51, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5,
	0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72,
	0x78, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45,
	0x51, 0x52, 0x58, 0x50, 0x4b, 0x54, 0x53, 0x45, 0x51, 0x45, 0x52, 0x52, 0x12, 0x65, 0x0a, 0x19,
	0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x52, 0x4e, 0x52, 0x5f,
	0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x6e, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65,
	0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52,
	0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x52, 0x4e, 0x52, 0x52, 0x45, 0x54, 0x52, 0x59,
	0x45, 0x52, 0x52, 0x12, 0x5f, 0x0a, 0x17, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x52, 0x58, 0x5f, 0x52, 0x4d, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x6d, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x52, 0x4d, 0x54, 0x41, 0x43,
	0x43, 0x45, 0x52, 0x52, 0x12, 0x5f, 0x0a, 0x17, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x52, 0x58, 0x5f, 0x52, 0x4d, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x45, 0x52, 0x52, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5, 0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x6d, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x52, 0x4d, 0x54, 0x52,
	0x45, 0x51, 0x45, 0x52, 0x52, 0x12, 0x57, 0x0a, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x27, 0xca, 0xb5, 0x03, 0x23, 0xa2, 0x01, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x52, 0x44,
	0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x4f, 0x50, 0x45, 0x52, 0x45, 0x52, 0x52, 0x12, 0x6d,
	0x0a, 0x1c, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x5f, 0x4e, 0x41, 0x4b, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0xca, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x6e,
	0x61, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x16, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58,
	0x49, 0x4d, 0x50, 0x4c, 0x4e, 0x41, 0x4b, 0x53, 0x45, 0x51, 0x45, 0x52, 0x52, 0x12, 0x54, 0x0a,
	0x13, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x43, 0x51, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x26, 0xca, 0xb5, 0x03, 0x22,
	0xa2, 0x01, 0x1f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f,
	0x63, 0x71, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x0f, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x43, 0x51, 0x45,
	0x45, 0x52, 0x52, 0x12, 0x5a, 0x0a, 0x15, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x52, 0x58, 0x5f, 0x43, 0x51, 0x45, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x28, 0xca, 0xb5, 0x03, 0x24, 0xa2, 0x01, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x71, 0x65, 0x5f, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x11, 0x52, 0x44,
	0x4d, 0x41, 0x52, 0x45, 0x51, 0x52, 0x58, 0x43, 0x51, 0x45, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x12,
	0x5b, 0x0a, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x44,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xca,
	0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f,
	0x72, 0x78, 0x5f, 0x64, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x52, 0x44, 0x4d, 0x41,
	0x52, 0x45, 0x51, 0x52, 0x58, 0x44, 0x55, 0x50, 0x52, 0x45, 0x53, 0x50, 0x12, 0x61, 0x0a, 0x18,
	0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29,
	0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71,
	0x5f, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x52,
	0x45, 0x51, 0x52, 0x58, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x50, 0x4b, 0x54, 0x53, 0x12,
	0x58, 0x0a, 0x13, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x5f, 0x4c,
	0x4f, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5,
	0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x74,
	0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0f, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45,
	0x51, 0x54, 0x58, 0x4c, 0x4f, 0x43, 0x45, 0x52, 0x52, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x44, 0x4d,
	0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xca, 0xb5, 0x03,
	0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x78,
	0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45,
	0x51, 0x54, 0x58, 0x4c, 0x4f, 0x43, 0x4f, 0x50, 0x45, 0x52, 0x45, 0x52, 0x52, 0x12, 0x62, 0x0a,
	0x18, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x5f, 0x4d, 0x45, 0x4d,
	0x5f, 0x4d, 0x47, 0x4d, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x5f, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x44,
	0x4d, 0x41, 0x52, 0x45, 0x51, 0x54, 0x58, 0x4d, 0x45, 0x4d, 0x4d, 0x47, 0x4d, 0x54, 0x45, 0x52,
	0x52, 0x12, 0x68, 0x0a, 0x1a, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x65, 0x78, 0x63, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x15, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x54, 0x58, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x45, 0x58, 0x43, 0x44, 0x45, 0x52, 0x52, 0x12, 0x6a, 0x0a, 0x1b, 0x52,
	0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x53,
	0x47, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x2e, 0xca, 0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x67, 0x6c, 0x5f, 0x69, 0x6e,
	0x76, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x15, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x51, 0x54, 0x58, 0x4c, 0x4f, 0x43, 0x53, 0x47,
	0x4c, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x52, 0x12, 0x63, 0x0a, 0x18, 0x52, 0x44, 0x4d, 0x41, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x44, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2,
	0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f,
	0x64, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50,
	0x52, 0x58, 0x44, 0x55, 0x50, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x5d, 0x0a, 0x16,
	0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x55, 0x54,
	0x4f, 0x46, 0x5f, 0x42, 0x55, 0x46, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0xca, 0xb5,
	0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x72, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x5f, 0x62, 0x75, 0x66, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53,
	0x50, 0x52, 0x58, 0x4f, 0x55, 0x54, 0x4f, 0x46, 0x42, 0x55, 0x46, 0x12, 0x60, 0x0a, 0x17, 0x52,
	0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x4f,
	0x55, 0x46, 0x5f, 0x53, 0x45, 0x51, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2a, 0xca, 0xb5,
	0x03, 0x26, 0xa2, 0x01, 0x23, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x72, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x6f, 0x75, 0x66, 0x5f, 0x73, 0x65, 0x71, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45,
	0x53, 0x50, 0x52, 0x58, 0x4f, 0x55, 0x54, 0x4f, 0x55, 0x46, 0x53, 0x45, 0x51, 0x12, 0x57, 0x0a,
	0x14, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x43, 0x51,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0xca, 0xb5, 0x03,
	0x23, 0xa2, 0x01, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72,
	0x78, 0x5f, 0x63, 0x71, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x10, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52, 0x58,
	0x43, 0x51, 0x45, 0x45, 0x52, 0x52, 0x12, 0x5d, 0x0a, 0x16, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x43, 0x51, 0x45, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0xca, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x71, 0x65,
	0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x12, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52, 0x58, 0x43, 0x51, 0x45,
	0x46, 0x4c, 0x55, 0x53, 0x48, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x6f,
	0x63, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52, 0x58,
	0x4c, 0x4f, 0x43, 0x4c, 0x45, 0x4e, 0x45, 0x52, 0x52, 0x12, 0x6d, 0x0a, 0x1c, 0x52, 0x44, 0x4d,
	0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x18,
	0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52, 0x58, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x12, 0x65, 0x0a, 0x19, 0x52, 0x44, 0x4d, 0x41,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2c, 0xca, 0xb5, 0x03,
	0x28, 0xa2, 0x01, 0x25, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72,
	0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x52,
	0x45, 0x53, 0x50, 0x52, 0x58, 0x4c, 0x4f, 0x43, 0x4f, 0x50, 0x45, 0x52, 0x45, 0x52, 0x52, 0x12,
	0x66, 0x0a, 0x19, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x52, 0x58, 0x5f,
	0x4f, 0x55, 0x54, 0x4f, 0x46, 0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x5f, 0x61,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x15, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52, 0x58, 0x4f, 0x55, 0x54, 0x4f,
	0x46, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x44, 0x4d, 0x41, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x5f,
	0x45, 0x52, 0x52, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2,
	0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x5f,
	0x70, 0x6b, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x13, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50,
	0x54, 0x58, 0x50, 0x4b, 0x54, 0x53, 0x45, 0x51, 0x45, 0x52, 0x52, 0x12, 0x73, 0x0a, 0x1e, 0x52,
	0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x4d, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x31, 0xca, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x6d, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x18, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50,
	0x54, 0x58, 0x52, 0x4d, 0x54, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x52, 0x45, 0x51, 0x45, 0x52, 0x52,
	0x12, 0x62, 0x0a, 0x18, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x4d, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x2b, 0xca, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x6d, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x13, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x54, 0x58, 0x52, 0x4d, 0x54, 0x41, 0x43,
	0x43, 0x45, 0x52, 0x52, 0x12, 0x65, 0x0a, 0x19, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x4d, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x6d,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x54,
	0x58, 0x52, 0x4d, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x45, 0x52, 0x52, 0x12, 0x68, 0x0a, 0x1a, 0x52,
	0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x4e, 0x52, 0x5f,
	0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x2d, 0xca, 0xb5, 0x03, 0x29, 0xa2, 0x01, 0x26, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x6e, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x15,
	0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x54, 0x58, 0x52, 0x4e, 0x52, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x45, 0x52, 0x52, 0x12, 0x6d, 0x0a, 0x1c, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x5f, 0x53, 0x47, 0x4c, 0x5f, 0x49, 0x4e,
	0x56, 0x5f, 0x45, 0x52, 0x52, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0xca, 0xb5, 0x03,
	0x2b, 0xa2, 0x01, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74,
	0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x73, 0x67, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x5f, 0x65, 0x72,
	0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x16, 0x52, 0x44,
	0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x54, 0x58, 0x4c, 0x4f, 0x43, 0x53, 0x47, 0x4c, 0x49, 0x4e,
	0x56, 0x45, 0x52, 0x52, 0x12, 0x65, 0x0a, 0x19, 0x52, 0x44, 0x4d, 0x41, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x30, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2c, 0xca, 0xb5, 0x03, 0x28, 0xa2, 0x01, 0x25,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x30,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x14, 0x52, 0x44, 0x4d, 0x41, 0x52, 0x45, 0x53, 0x50, 0x52,
	0x58, 0x53, 0x30, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x45, 0x52, 0x52, 0x42, 0x10, 0x5a, 0x0e, 0x67,
	0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rdmastats_proto_rawDescOnce sync.Once
	file_rdmastats_proto_rawDescData = file_rdmastats_proto_rawDesc
)

func file_rdmastats_proto_rawDescGZIP() []byte {
	file_rdmastats_proto_rawDescOnce.Do(func() {
		file_rdmastats_proto_rawDescData = protoimpl.X.CompressGZIP(file_rdmastats_proto_rawDescData)
	})
	return file_rdmastats_proto_rawDescData
}

var file_rdmastats_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_rdmastats_proto_goTypes = []any{
	(*RDMAStats)(nil), // 0: nicmetrics.RDMAStats
}
var file_rdmastats_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rdmastats_proto_init() }
func file_rdmastats_proto_init() {
	if File_rdmastats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rdmastats_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RDMAStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rdmastats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rdmastats_proto_goTypes,
		DependencyIndexes: file_rdmastats_proto_depIdxs,
		MessageInfos:      file_rdmastats_proto_msgTypes,
	}.Build()
	File_rdmastats_proto = out.File
	file_rdmastats_proto_rawDesc = nil
	file_rdmastats_proto_goTypes = nil
	file_rdmastats_proto_depIdxs = nil
}
