//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD AI NIC Port Metrics
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: port.proto

package nicmetrics

import (
	_ "github.com/alta/protopatch/patch/gopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PortStatsField defines the various statistics fields for port-level metrics.
// Each field represents a different type of statistic related to the port's performance and health,
// such as frames received successfully, total frames received, and other specific metrics.
// The fields are represented as integers starting from 0 and are used for statistical tracking of the port's activity.
type PortStatsField int32

const (
	PortStatsField_FRAMES_RX_OK            PortStatsField = 0
	PortStatsField_FRAMES_RX_ALL           PortStatsField = 1
	PortStatsField_FRAMES_RX_BADFCS        PortStatsField = 2
	PortStatsField_FRAMES_RX_BADALL        PortStatsField = 3
	PortStatsField_OCTETS_RX_OK            PortStatsField = 4
	PortStatsField_OCTETS_RX_ALL           PortStatsField = 5
	PortStatsField_FRAMES_RX_UNICAST       PortStatsField = 6
	PortStatsField_FRAMES_RX_MULTICAST     PortStatsField = 7
	PortStatsField_FRAMES_RX_BROADCAST     PortStatsField = 8
	PortStatsField_FRAMES_RX_PAUSE         PortStatsField = 9
	PortStatsField_FRAMES_RX_BADLENGTH     PortStatsField = 10
	PortStatsField_FRAMES_RX_UNDERSIZED    PortStatsField = 11
	PortStatsField_FRAMES_RX_OVERSIZED     PortStatsField = 12
	PortStatsField_FRAMES_RX_FRAGMENTS     PortStatsField = 13
	PortStatsField_FRAMES_RX_JABBER        PortStatsField = 14
	PortStatsField_FRAMES_RX_PRIPAUSE      PortStatsField = 15
	PortStatsField_FRAMES_RX_STOMPED_CRC   PortStatsField = 16
	PortStatsField_FRAMES_RX_TOO_LONG      PortStatsField = 17
	PortStatsField_FRAMES_RX_VLAN_GOOD     PortStatsField = 18
	PortStatsField_FRAMES_RX_DROPPED       PortStatsField = 19
	PortStatsField_FRAMES_RX_LESS_THAN_64B PortStatsField = 20
	PortStatsField_FRAMES_RX_64B           PortStatsField = 21
	PortStatsField_FRAMES_RX_65B_127B      PortStatsField = 22
	PortStatsField_FRAMES_RX_128B_255B     PortStatsField = 23
	PortStatsField_FRAMES_RX_256B_511B     PortStatsField = 24
	PortStatsField_FRAMES_RX_512B_1023B    PortStatsField = 25
	PortStatsField_FRAMES_RX_1024B_1518B   PortStatsField = 26
	PortStatsField_FRAMES_RX_1519B_2047B   PortStatsField = 27
	PortStatsField_FRAMES_RX_2048B_4095B   PortStatsField = 28
	PortStatsField_FRAMES_RX_4096B_8191B   PortStatsField = 29
	PortStatsField_FRAMES_RX_8192B_9215B   PortStatsField = 30
	PortStatsField_FRAMES_RX_OTHER         PortStatsField = 31
	PortStatsField_FRAMES_TX_OK            PortStatsField = 32
	PortStatsField_FRAMES_TX_ALL           PortStatsField = 33
	PortStatsField_FRAMES_TX_BAD           PortStatsField = 34
	PortStatsField_OCTETS_TX_OK            PortStatsField = 35
	PortStatsField_OCTETS_TX_TOTAL         PortStatsField = 36
	PortStatsField_FRAMES_TX_UNICAST       PortStatsField = 37
	PortStatsField_FRAMES_TX_MULTICAST     PortStatsField = 38
	PortStatsField_FRAMES_TX_BROADCAST     PortStatsField = 39
	PortStatsField_FRAMES_TX_PAUSE         PortStatsField = 40
	PortStatsField_FRAMES_TX_PRIPAUSE      PortStatsField = 41
	PortStatsField_FRAMES_TX_VLAN          PortStatsField = 42
	PortStatsField_FRAMES_TX_LESS_THAN_64B PortStatsField = 43
	PortStatsField_FRAMES_TX_64B           PortStatsField = 44
	PortStatsField_FRAMES_TX_65B_127B      PortStatsField = 45
	PortStatsField_FRAMES_TX_128B_255B     PortStatsField = 46
	PortStatsField_FRAMES_TX_256B_511B     PortStatsField = 47
	PortStatsField_FRAMES_TX_512B_1023B    PortStatsField = 48
	PortStatsField_FRAMES_TX_1024B_1518B   PortStatsField = 49
	PortStatsField_FRAMES_TX_1519B_2047B   PortStatsField = 50
	PortStatsField_FRAMES_TX_2048B_4095B   PortStatsField = 51
	PortStatsField_FRAMES_TX_4096B_8191B   PortStatsField = 52
	PortStatsField_FRAMES_TX_8192B_9215B   PortStatsField = 53
	PortStatsField_FRAMES_TX_OTHER         PortStatsField = 54
	PortStatsField_FRAMES_TX_PRI_0         PortStatsField = 55
	PortStatsField_FRAMES_TX_PRI_1         PortStatsField = 56
	PortStatsField_FRAMES_TX_PRI_2         PortStatsField = 57
	PortStatsField_FRAMES_TX_PRI_3         PortStatsField = 58
	PortStatsField_FRAMES_TX_PRI_4         PortStatsField = 59
	PortStatsField_FRAMES_TX_PRI_5         PortStatsField = 60
	PortStatsField_FRAMES_TX_PRI_6         PortStatsField = 61
	PortStatsField_FRAMES_TX_PRI_7         PortStatsField = 62
	PortStatsField_FRAMES_RX_PRI_0         PortStatsField = 63
	PortStatsField_FRAMES_RX_PRI_1         PortStatsField = 64
	PortStatsField_FRAMES_RX_PRI_2         PortStatsField = 65
	PortStatsField_FRAMES_RX_PRI_3         PortStatsField = 66
	PortStatsField_FRAMES_RX_PRI_4         PortStatsField = 67
	PortStatsField_FRAMES_RX_PRI_5         PortStatsField = 68
	PortStatsField_FRAMES_RX_PRI_6         PortStatsField = 69
	PortStatsField_FRAMES_RX_PRI_7         PortStatsField = 70
	PortStatsField_TX_PRIPAUSE_0_1US_COUNT PortStatsField = 71
	PortStatsField_TX_PRIPAUSE_1_1US_COUNT PortStatsField = 72
	PortStatsField_TX_PRIPAUSE_2_1US_COUNT PortStatsField = 73
	PortStatsField_TX_PRIPAUSE_3_1US_COUNT PortStatsField = 74
	PortStatsField_TX_PRIPAUSE_4_1US_COUNT PortStatsField = 75
	PortStatsField_TX_PRIPAUSE_5_1US_COUNT PortStatsField = 76
	PortStatsField_TX_PRIPAUSE_6_1US_COUNT PortStatsField = 77
	PortStatsField_TX_PRIPAUSE_7_1US_COUNT PortStatsField = 78
	PortStatsField_RX_PRIPAUSE_0_1US_COUNT PortStatsField = 79
	PortStatsField_RX_PRIPAUSE_1_1US_COUNT PortStatsField = 80
	PortStatsField_RX_PRIPAUSE_2_1US_COUNT PortStatsField = 81
	PortStatsField_RX_PRIPAUSE_3_1US_COUNT PortStatsField = 82
	PortStatsField_RX_PRIPAUSE_4_1US_COUNT PortStatsField = 83
	PortStatsField_RX_PRIPAUSE_5_1US_COUNT PortStatsField = 84
	PortStatsField_RX_PRIPAUSE_6_1US_COUNT PortStatsField = 85
	PortStatsField_RX_PRIPAUSE_7_1US_COUNT PortStatsField = 86
	PortStatsField_RX_PAUSE_1US_COUNT      PortStatsField = 87
	PortStatsField_FRAMES_TX_TRUNCATED     PortStatsField = 88
	PortStatsField_RSFEC_CORRECTABLE_WORD  PortStatsField = 89
	PortStatsField_RSFEC_CH_SYMBOL_ERR_CNT PortStatsField = 90
)

// Enum value maps for PortStatsField.
var (
	PortStatsField_name = map[int32]string{
		0:  "FRAMES_RX_OK",
		1:  "FRAMES_RX_ALL",
		2:  "FRAMES_RX_BADFCS",
		3:  "FRAMES_RX_BADALL",
		4:  "OCTETS_RX_OK",
		5:  "OCTETS_RX_ALL",
		6:  "FRAMES_RX_UNICAST",
		7:  "FRAMES_RX_MULTICAST",
		8:  "FRAMES_RX_BROADCAST",
		9:  "FRAMES_RX_PAUSE",
		10: "FRAMES_RX_BADLENGTH",
		11: "FRAMES_RX_UNDERSIZED",
		12: "FRAMES_RX_OVERSIZED",
		13: "FRAMES_RX_FRAGMENTS",
		14: "FRAMES_RX_JABBER",
		15: "FRAMES_RX_PRIPAUSE",
		16: "FRAMES_RX_STOMPED_CRC",
		17: "FRAMES_RX_TOO_LONG",
		18: "FRAMES_RX_VLAN_GOOD",
		19: "FRAMES_RX_DROPPED",
		20: "FRAMES_RX_LESS_THAN_64B",
		21: "FRAMES_RX_64B",
		22: "FRAMES_RX_65B_127B",
		23: "FRAMES_RX_128B_255B",
		24: "FRAMES_RX_256B_511B",
		25: "FRAMES_RX_512B_1023B",
		26: "FRAMES_RX_1024B_1518B",
		27: "FRAMES_RX_1519B_2047B",
		28: "FRAMES_RX_2048B_4095B",
		29: "FRAMES_RX_4096B_8191B",
		30: "FRAMES_RX_8192B_9215B",
		31: "FRAMES_RX_OTHER",
		32: "FRAMES_TX_OK",
		33: "FRAMES_TX_ALL",
		34: "FRAMES_TX_BAD",
		35: "OCTETS_TX_OK",
		36: "OCTETS_TX_TOTAL",
		37: "FRAMES_TX_UNICAST",
		38: "FRAMES_TX_MULTICAST",
		39: "FRAMES_TX_BROADCAST",
		40: "FRAMES_TX_PAUSE",
		41: "FRAMES_TX_PRIPAUSE",
		42: "FRAMES_TX_VLAN",
		43: "FRAMES_TX_LESS_THAN_64B",
		44: "FRAMES_TX_64B",
		45: "FRAMES_TX_65B_127B",
		46: "FRAMES_TX_128B_255B",
		47: "FRAMES_TX_256B_511B",
		48: "FRAMES_TX_512B_1023B",
		49: "FRAMES_TX_1024B_1518B",
		50: "FRAMES_TX_1519B_2047B",
		51: "FRAMES_TX_2048B_4095B",
		52: "FRAMES_TX_4096B_8191B",
		53: "FRAMES_TX_8192B_9215B",
		54: "FRAMES_TX_OTHER",
		55: "FRAMES_TX_PRI_0",
		56: "FRAMES_TX_PRI_1",
		57: "FRAMES_TX_PRI_2",
		58: "FRAMES_TX_PRI_3",
		59: "FRAMES_TX_PRI_4",
		60: "FRAMES_TX_PRI_5",
		61: "FRAMES_TX_PRI_6",
		62: "FRAMES_TX_PRI_7",
		63: "FRAMES_RX_PRI_0",
		64: "FRAMES_RX_PRI_1",
		65: "FRAMES_RX_PRI_2",
		66: "FRAMES_RX_PRI_3",
		67: "FRAMES_RX_PRI_4",
		68: "FRAMES_RX_PRI_5",
		69: "FRAMES_RX_PRI_6",
		70: "FRAMES_RX_PRI_7",
		71: "TX_PRIPAUSE_0_1US_COUNT",
		72: "TX_PRIPAUSE_1_1US_COUNT",
		73: "TX_PRIPAUSE_2_1US_COUNT",
		74: "TX_PRIPAUSE_3_1US_COUNT",
		75: "TX_PRIPAUSE_4_1US_COUNT",
		76: "TX_PRIPAUSE_5_1US_COUNT",
		77: "TX_PRIPAUSE_6_1US_COUNT",
		78: "TX_PRIPAUSE_7_1US_COUNT",
		79: "RX_PRIPAUSE_0_1US_COUNT",
		80: "RX_PRIPAUSE_1_1US_COUNT",
		81: "RX_PRIPAUSE_2_1US_COUNT",
		82: "RX_PRIPAUSE_3_1US_COUNT",
		83: "RX_PRIPAUSE_4_1US_COUNT",
		84: "RX_PRIPAUSE_5_1US_COUNT",
		85: "RX_PRIPAUSE_6_1US_COUNT",
		86: "RX_PRIPAUSE_7_1US_COUNT",
		87: "RX_PAUSE_1US_COUNT",
		88: "FRAMES_TX_TRUNCATED",
		89: "RSFEC_CORRECTABLE_WORD",
		90: "RSFEC_CH_SYMBOL_ERR_CNT",
	}
	PortStatsField_value = map[string]int32{
		"FRAMES_RX_OK":            0,
		"FRAMES_RX_ALL":           1,
		"FRAMES_RX_BADFCS":        2,
		"FRAMES_RX_BADALL":        3,
		"OCTETS_RX_OK":            4,
		"OCTETS_RX_ALL":           5,
		"FRAMES_RX_UNICAST":       6,
		"FRAMES_RX_MULTICAST":     7,
		"FRAMES_RX_BROADCAST":     8,
		"FRAMES_RX_PAUSE":         9,
		"FRAMES_RX_BADLENGTH":     10,
		"FRAMES_RX_UNDERSIZED":    11,
		"FRAMES_RX_OVERSIZED":     12,
		"FRAMES_RX_FRAGMENTS":     13,
		"FRAMES_RX_JABBER":        14,
		"FRAMES_RX_PRIPAUSE":      15,
		"FRAMES_RX_STOMPED_CRC":   16,
		"FRAMES_RX_TOO_LONG":      17,
		"FRAMES_RX_VLAN_GOOD":     18,
		"FRAMES_RX_DROPPED":       19,
		"FRAMES_RX_LESS_THAN_64B": 20,
		"FRAMES_RX_64B":           21,
		"FRAMES_RX_65B_127B":      22,
		"FRAMES_RX_128B_255B":     23,
		"FRAMES_RX_256B_511B":     24,
		"FRAMES_RX_512B_1023B":    25,
		"FRAMES_RX_1024B_1518B":   26,
		"FRAMES_RX_1519B_2047B":   27,
		"FRAMES_RX_2048B_4095B":   28,
		"FRAMES_RX_4096B_8191B":   29,
		"FRAMES_RX_8192B_9215B":   30,
		"FRAMES_RX_OTHER":         31,
		"FRAMES_TX_OK":            32,
		"FRAMES_TX_ALL":           33,
		"FRAMES_TX_BAD":           34,
		"OCTETS_TX_OK":            35,
		"OCTETS_TX_TOTAL":         36,
		"FRAMES_TX_UNICAST":       37,
		"FRAMES_TX_MULTICAST":     38,
		"FRAMES_TX_BROADCAST":     39,
		"FRAMES_TX_PAUSE":         40,
		"FRAMES_TX_PRIPAUSE":      41,
		"FRAMES_TX_VLAN":          42,
		"FRAMES_TX_LESS_THAN_64B": 43,
		"FRAMES_TX_64B":           44,
		"FRAMES_TX_65B_127B":      45,
		"FRAMES_TX_128B_255B":     46,
		"FRAMES_TX_256B_511B":     47,
		"FRAMES_TX_512B_1023B":    48,
		"FRAMES_TX_1024B_1518B":   49,
		"FRAMES_TX_1519B_2047B":   50,
		"FRAMES_TX_2048B_4095B":   51,
		"FRAMES_TX_4096B_8191B":   52,
		"FRAMES_TX_8192B_9215B":   53,
		"FRAMES_TX_OTHER":         54,
		"FRAMES_TX_PRI_0":         55,
		"FRAMES_TX_PRI_1":         56,
		"FRAMES_TX_PRI_2":         57,
		"FRAMES_TX_PRI_3":         58,
		"FRAMES_TX_PRI_4":         59,
		"FRAMES_TX_PRI_5":         60,
		"FRAMES_TX_PRI_6":         61,
		"FRAMES_TX_PRI_7":         62,
		"FRAMES_RX_PRI_0":         63,
		"FRAMES_RX_PRI_1":         64,
		"FRAMES_RX_PRI_2":         65,
		"FRAMES_RX_PRI_3":         66,
		"FRAMES_RX_PRI_4":         67,
		"FRAMES_RX_PRI_5":         68,
		"FRAMES_RX_PRI_6":         69,
		"FRAMES_RX_PRI_7":         70,
		"TX_PRIPAUSE_0_1US_COUNT": 71,
		"TX_PRIPAUSE_1_1US_COUNT": 72,
		"TX_PRIPAUSE_2_1US_COUNT": 73,
		"TX_PRIPAUSE_3_1US_COUNT": 74,
		"TX_PRIPAUSE_4_1US_COUNT": 75,
		"TX_PRIPAUSE_5_1US_COUNT": 76,
		"TX_PRIPAUSE_6_1US_COUNT": 77,
		"TX_PRIPAUSE_7_1US_COUNT": 78,
		"RX_PRIPAUSE_0_1US_COUNT": 79,
		"RX_PRIPAUSE_1_1US_COUNT": 80,
		"RX_PRIPAUSE_2_1US_COUNT": 81,
		"RX_PRIPAUSE_3_1US_COUNT": 82,
		"RX_PRIPAUSE_4_1US_COUNT": 83,
		"RX_PRIPAUSE_5_1US_COUNT": 84,
		"RX_PRIPAUSE_6_1US_COUNT": 85,
		"RX_PRIPAUSE_7_1US_COUNT": 86,
		"RX_PAUSE_1US_COUNT":      87,
		"FRAMES_TX_TRUNCATED":     88,
		"RSFEC_CORRECTABLE_WORD":  89,
		"RSFEC_CH_SYMBOL_ERR_CNT": 90,
	}
)

func (x PortStatsField) Enum() *PortStatsField {
	p := new(PortStatsField)
	*p = x
	return p
}

func (x PortStatsField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortStatsField) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[0].Descriptor()
}

func (PortStatsField) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[0]
}

func (x PortStatsField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortStatsField.Descriptor instead.
func (PortStatsField) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

// Stats encapsulates the statistics fields as a map, where keys are string identifiers
// and values are unsigned integers representing the statistics count.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of statistics where the key is the statistic name (string), and the value is the statistic count (uint64).
	Stats map[string]uint64 `protobuf:"bytes,1,rep,name=Stats,proto3" json:",inline,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

func (x *Stats) GetStats() map[string]uint64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

// PortStats represents the statistics of an individual port, identified by a unique ID.
type PortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the port
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// Stats field that contains various statistics for the port, such as RX, TX counts, etc.
	Stats *Stats `protobuf:"bytes,2,opt,name=Stats,proto3" json:",inline,omitempty"`
}

func (x *PortStats) Reset() {
	*x = PortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStats) ProtoMessage() {}

func (x *PortStats) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStats.ProtoReflect.Descriptor instead.
func (*PortStats) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{1}
}

func (x *PortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PortStats) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// NICPortStats represents a collection of port statistics grouped by NIC ID.
// This allows statistics to be organized by Network Interface Cards (NICs).
type NICPortStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the NIC
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id,omitempty"`
	// A list of PortStats, each representing statistics for an individual port on this NIC.
	Port []*PortStats `protobuf:"bytes,2,rep,name=Port,proto3" json:"port,omitempty"`
}

func (x *NICPortStats) Reset() {
	*x = NICPortStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICPortStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICPortStats) ProtoMessage() {}

func (x *NICPortStats) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICPortStats.ProtoReflect.Descriptor instead.
func (*NICPortStats) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{2}
}

func (x *NICPortStats) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NICPortStats) GetPort() []*PortStats {
	if x != nil {
		return x.Port
	}
	return nil
}

// PortStatsList represents a list of AI NIC port statistics. This is typically used to store statistics
// for multiple NICs in a system, where each NIC has its associated ports with statistics.
type PortStatsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of NICPortStats, each representing statistics for a particular NIC.
	Nic []*NICPortStats `protobuf:"bytes,1,rep,name=Nic,proto3" json:"nic,omitempty"`
}

func (x *PortStatsList) Reset() {
	*x = PortStatsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatsList) ProtoMessage() {}

func (x *PortStatsList) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatsList.ProtoReflect.Descriptor instead.
func (*PortStatsList) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{3}
}

func (x *PortStatsList) GetNic() []*NICPortStats {
	if x != nil {
		return x.Nic
	}
	return nil
}

var File_port_proto protoreflect.FileDescriptor

var file_port_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x69,
	0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0xca, 0xb5, 0x03, 0x1b,
	0xa2, 0x01, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1f, 0xca, 0xb5, 0x03, 0x1b, 0xa2, 0x01,
	0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4e, 0x49, 0x43, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xca,
	0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x49, 0x44, 0x12, 0x47, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x69,
	0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x1c, 0xca, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x58, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x03, 0x4e, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x4e, 0x49, 0x43, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1b,
	0xca, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x69, 0x63,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x03, 0x4e, 0x69, 0x63,
	0x2a, 0xad, 0x11, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x52, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x46, 0x43, 0x53, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x5f, 0x52,
	0x58, 0x5f, 0x4f, 0x4b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53,
	0x5f, 0x52, 0x58, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x44, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0a,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4a, 0x41, 0x42, 0x42, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x45, 0x44, 0x5f,
	0x43, 0x52, 0x43, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x52, 0x58, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x52, 0x58, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x13, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x34, 0x42, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x36, 0x34, 0x42, 0x10, 0x15, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x36, 0x35, 0x42, 0x5f, 0x31,
	0x32, 0x37, 0x42, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x52, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x42, 0x5f, 0x32, 0x35, 0x35, 0x42, 0x10, 0x17, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x32, 0x35, 0x36, 0x42,
	0x5f, 0x35, 0x31, 0x31, 0x42, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x35, 0x31, 0x32, 0x42, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x42, 0x10,
	0x19, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x31,
	0x30, 0x32, 0x34, 0x42, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x42, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x42, 0x5f,
	0x32, 0x30, 0x34, 0x37, 0x42, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x42, 0x5f, 0x34, 0x30, 0x39, 0x35, 0x42,
	0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x34, 0x30, 0x39, 0x36, 0x42, 0x5f, 0x38, 0x31, 0x39, 0x31, 0x42, 0x10, 0x1d, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x42,
	0x5f, 0x39, 0x32, 0x31, 0x35, 0x42, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x4f, 0x4b, 0x10, 0x20, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f,
	0x42, 0x41, 0x44, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x4f, 0x4b, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x28, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x10, 0x2a, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x54, 0x58, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x36, 0x34,
	0x42, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58,
	0x5f, 0x36, 0x34, 0x42, 0x10, 0x2c, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x54, 0x58, 0x5f, 0x36, 0x35, 0x42, 0x5f, 0x31, 0x32, 0x37, 0x42, 0x10, 0x2d, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x31, 0x32, 0x38, 0x42,
	0x5f, 0x32, 0x35, 0x35, 0x42, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x54, 0x58, 0x5f, 0x32, 0x35, 0x36, 0x42, 0x5f, 0x35, 0x31, 0x31, 0x42, 0x10, 0x2f,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x35, 0x31,
	0x32, 0x42, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x42, 0x10, 0x30, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x42, 0x5f, 0x31, 0x35,
	0x31, 0x38, 0x42, 0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x42, 0x5f, 0x32, 0x30, 0x34, 0x37, 0x42, 0x10, 0x32,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x32, 0x30,
	0x34, 0x38, 0x42, 0x5f, 0x34, 0x30, 0x39, 0x35, 0x42, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x42, 0x5f, 0x38,
	0x31, 0x39, 0x31, 0x42, 0x10, 0x34, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x54, 0x58, 0x5f, 0x38, 0x31, 0x39, 0x32, 0x42, 0x5f, 0x39, 0x32, 0x31, 0x35, 0x42, 0x10,
	0x35, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x30, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x31, 0x10, 0x38,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52,
	0x49, 0x5f, 0x32, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x33, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x34, 0x10, 0x3b, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49,
	0x5f, 0x35, 0x10, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54,
	0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x36, 0x10, 0x3d, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x37, 0x10, 0x3e, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f,
	0x30, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58,
	0x5f, 0x50, 0x52, 0x49, 0x5f, 0x31, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x32, 0x10, 0x41, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x33,
	0x10, 0x42, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x52, 0x49, 0x5f, 0x34, 0x10, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x35, 0x10, 0x44, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x5f, 0x36, 0x10,
	0x45, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x50,
	0x52, 0x49, 0x5f, 0x37, 0x10, 0x46, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x30, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x47, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x31, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x48,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x32, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x49, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x33, 0x5f, 0x31,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58,
	0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x34, 0x5f, 0x31, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4b, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52,
	0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x35, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x4c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x36, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x4d, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x37, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4e, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x30, 0x5f,
	0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4f, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x31, 0x5f, 0x31, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x50, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x58, 0x5f, 0x50,
	0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x32, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x33, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x52, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x34, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x53, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x35,
	0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x54, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x58, 0x5f, 0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x36, 0x5f, 0x31, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x55, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x58, 0x5f,
	0x50, 0x52, 0x49, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x37, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x56, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x31, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x57, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x58, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x53, 0x46, 0x45, 0x43,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0x59, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x53, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x5a,
	0x42, 0x10, 0x5a, 0x0e, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_port_proto_rawDescOnce sync.Once
	file_port_proto_rawDescData = file_port_proto_rawDesc
)

func file_port_proto_rawDescGZIP() []byte {
	file_port_proto_rawDescOnce.Do(func() {
		file_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_port_proto_rawDescData)
	})
	return file_port_proto_rawDescData
}

var file_port_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_port_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_port_proto_goTypes = []any{
	(PortStatsField)(0),   // 0: nicmetrics.PortStatsField
	(*Stats)(nil),         // 1: nicmetrics.Stats
	(*PortStats)(nil),     // 2: nicmetrics.PortStats
	(*NICPortStats)(nil),  // 3: nicmetrics.NICPortStats
	(*PortStatsList)(nil), // 4: nicmetrics.PortStatsList
	nil,                   // 5: nicmetrics.Stats.StatsEntry
}
var file_port_proto_depIdxs = []int32{
	5, // 0: nicmetrics.Stats.Stats:type_name -> nicmetrics.Stats.StatsEntry
	1, // 1: nicmetrics.PortStats.Stats:type_name -> nicmetrics.Stats
	2, // 2: nicmetrics.NICPortStats.Port:type_name -> nicmetrics.PortStats
	3, // 3: nicmetrics.PortStatsList.Nic:type_name -> nicmetrics.NICPortStats
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_port_proto_init() }
func file_port_proto_init() {
	if File_port_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_port_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NICPortStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PortStatsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_port_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_port_proto_goTypes,
		DependencyIndexes: file_port_proto_depIdxs,
		EnumInfos:         file_port_proto_enumTypes,
		MessageInfos:      file_port_proto_msgTypes,
	}.Build()
	File_port_proto = out.File
	file_port_proto_rawDesc = nil
	file_port_proto_goTypes = nil
	file_port_proto_depIdxs = nil
}
