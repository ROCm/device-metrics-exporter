//
//Copyright (c) Advanced Micro Devices, Inc. All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the \"License\");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an \"AS IS\" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//----------------------------------------------------------------------------
///
/// \file
/// AMD NIC Metrics Service
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: nicmetricssvc.proto

package nicmetricssvc

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Interface admin state
type AdminState int32

const (
	AdminState_UP   AdminState = 0
	AdminState_DOWN AdminState = 1
)

// Enum value maps for AdminState.
var (
	AdminState_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	AdminState_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x AdminState) Enum() *AdminState {
	p := new(AdminState)
	*p = x
	return p
}

func (x AdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_nicmetricssvc_proto_enumTypes[0].Descriptor()
}

func (AdminState) Type() protoreflect.EnumType {
	return &file_nicmetricssvc_proto_enumTypes[0]
}

func (x AdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminState.Descriptor instead.
func (AdminState) EnumDescriptor() ([]byte, []int) {
	return file_nicmetricssvc_proto_rawDescGZIP(), []int{0}
}

type Health int32

const (
	Health_UNKNOWN   Health = 0
	Health_HEALTHY   Health = 1
	Health_UNHEALTHY Health = 2
)

// Enum value maps for Health.
var (
	Health_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
	}
	Health_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
	}
)

func (x Health) Enum() *Health {
	p := new(Health)
	*p = x
	return p
}

func (x Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Health) Descriptor() protoreflect.EnumDescriptor {
	return file_nicmetricssvc_proto_enumTypes[1].Descriptor()
}

func (Health) Type() protoreflect.EnumType {
	return &file_nicmetricssvc_proto_enumTypes[1]
}

func (x Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Health.Descriptor instead.
func (Health) EnumDescriptor() ([]byte, []int) {
	return file_nicmetricssvc_proto_rawDescGZIP(), []int{1}
}

type NICState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PCIe Bus ID refers to device ID in device plugin
	Device string `protobuf:"bytes,1,opt,name=Device,proto3" json:"Device,omitempty"`
	// health state string value of Health enum
	Health string `protobuf:"bytes,2,opt,name=Health,proto3" json:"Health,omitempty"`
	// LIF UUID
	UUID string `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *NICState) Reset() {
	*x = NICState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nicmetricssvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICState) ProtoMessage() {}

func (x *NICState) ProtoReflect() protoreflect.Message {
	mi := &file_nicmetricssvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICState.ProtoReflect.Descriptor instead.
func (*NICState) Descriptor() ([]byte, []int) {
	return file_nicmetricssvc_proto_rawDescGZIP(), []int{0}
}

func (x *NICState) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *NICState) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *NICState) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type NICStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of requested NIC States
	NICState []*NICState `protobuf:"bytes,1,rep,name=NICState,proto3" json:"NICState,omitempty"`
}

func (x *NICStateResponse) Reset() {
	*x = NICStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nicmetricssvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICStateResponse) ProtoMessage() {}

func (x *NICStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nicmetricssvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICStateResponse.ProtoReflect.Descriptor instead.
func (*NICStateResponse) Descriptor() ([]byte, []int) {
	return file_nicmetricssvc_proto_rawDescGZIP(), []int{1}
}

func (x *NICStateResponse) GetNICState() []*NICState {
	if x != nil {
		return x.NICState
	}
	return nil
}

var File_nicmetricssvc_proto protoreflect.FileDescriptor

var file_nicmetricssvc_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x73, 0x76, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x73, 0x76, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4e, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x47, 0x0a, 0x10, 0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x1e, 0x0a, 0x0a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x32, 0x53, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1f, 0x2e, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x73, 0x76, 0x63, 0x2e,
	0x4e, 0x49, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x69, 0x63, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nicmetricssvc_proto_rawDescOnce sync.Once
	file_nicmetricssvc_proto_rawDescData = file_nicmetricssvc_proto_rawDesc
)

func file_nicmetricssvc_proto_rawDescGZIP() []byte {
	file_nicmetricssvc_proto_rawDescOnce.Do(func() {
		file_nicmetricssvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_nicmetricssvc_proto_rawDescData)
	})
	return file_nicmetricssvc_proto_rawDescData
}

var file_nicmetricssvc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nicmetricssvc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nicmetricssvc_proto_goTypes = []any{
	(AdminState)(0),          // 0: nicmetricssvc.AdminState
	(Health)(0),              // 1: nicmetricssvc.Health
	(*NICState)(nil),         // 2: nicmetricssvc.NICState
	(*NICStateResponse)(nil), // 3: nicmetricssvc.NICStateResponse
	(*empty.Empty)(nil),      // 4: google.protobuf.Empty
}
var file_nicmetricssvc_proto_depIdxs = []int32{
	2, // 0: nicmetricssvc.NICStateResponse.NICState:type_name -> nicmetricssvc.NICState
	4, // 1: nicmetricssvc.MetricsService.List:input_type -> google.protobuf.Empty
	3, // 2: nicmetricssvc.MetricsService.List:output_type -> nicmetricssvc.NICStateResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_nicmetricssvc_proto_init() }
func file_nicmetricssvc_proto_init() {
	if File_nicmetricssvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nicmetricssvc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NICState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nicmetricssvc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NICStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nicmetricssvc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nicmetricssvc_proto_goTypes,
		DependencyIndexes: file_nicmetricssvc_proto_depIdxs,
		EnumInfos:         file_nicmetricssvc_proto_enumTypes,
		MessageInfos:      file_nicmetricssvc_proto_msgTypes,
	}.Build()
	File_nicmetricssvc_proto = out.File
	file_nicmetricssvc_proto_rawDesc = nil
	file_nicmetricssvc_proto_goTypes = nil
	file_nicmetricssvc_proto_depIdxs = nil
}
