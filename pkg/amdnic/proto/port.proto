/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


//----------------------------------------------------------------------------
///
/// \file
/// AMD AI NIC Port Metrics
///
//----------------------------------------------------------------------------

syntax = "proto3";
option go_package = "gen/nicmetrics"; 
package nicmetrics;

import "github.com/alta/protopatch/patch/go.proto";

/*
// Sample port statistics
{
    "nic": [
        {
            "id": "NIC1",
            "port": [
                {
                    "id": "port1",
                    "FRAMES_TX_OK": 1000,
                    "FRAMES_RX_OK": 1500
                },
                {
                    "id": "port2",
                    "FRAMES_RX_OK": 1000,
                    "FRAMES_TX_OK": 1500                    
                }
            ]
        }
    ]
}
*/

// PortStatsField defines the various statistics fields for port-level metrics. 
// Each field represents a different type of statistic related to the port's performance and health, 
// such as frames received successfully, total frames received, and other specific metrics.
// The fields are represented as integers starting from 0 and are used for statistical tracking of the port's activity.
enum PortStatsField {
    FRAMES_RX_OK             = 0;
    FRAMES_RX_ALL            = 1;
    FRAMES_RX_BADFCS         = 2;
    FRAMES_RX_BADALL         = 3;
    OCTETS_RX_OK             = 4;
    OCTETS_RX_ALL            = 5;
    FRAMES_RX_UNICAST        = 6;
    FRAMES_RX_MULTICAST      = 7;
    FRAMES_RX_BROADCAST      = 8;
    FRAMES_RX_PAUSE          = 9;
    FRAMES_RX_BADLENGTH      = 10;
    FRAMES_RX_UNDERSIZED     = 11;
    FRAMES_RX_OVERSIZED      = 12;
    FRAMES_RX_FRAGMENTS      = 13;
    FRAMES_RX_JABBER         = 14;
    FRAMES_RX_PRIPAUSE       = 15;
    FRAMES_RX_STOMPED_CRC    = 16;
    FRAMES_RX_TOO_LONG       = 17;
    FRAMES_RX_VLAN_GOOD      = 18;
    FRAMES_RX_DROPPED        = 19;
    FRAMES_RX_LESS_THAN_64B  = 20;
    FRAMES_RX_64B            = 21;
    FRAMES_RX_65B_127B       = 22;
    FRAMES_RX_128B_255B      = 23;
    FRAMES_RX_256B_511B      = 24;
    FRAMES_RX_512B_1023B     = 25;
    FRAMES_RX_1024B_1518B    = 26;
    FRAMES_RX_1519B_2047B    = 27;
    FRAMES_RX_2048B_4095B    = 28;
    FRAMES_RX_4096B_8191B    = 29;
    FRAMES_RX_8192B_9215B    = 30;
    FRAMES_RX_OTHER          = 31;
    FRAMES_TX_OK             = 32;
    FRAMES_TX_ALL            = 33;
    FRAMES_TX_BAD            = 34;
    OCTETS_TX_OK             = 35;
    OCTETS_TX_TOTAL          = 36;
    FRAMES_TX_UNICAST        = 37;
    FRAMES_TX_MULTICAST      = 38;
    FRAMES_TX_BROADCAST      = 39;
    FRAMES_TX_PAUSE          = 40;
    FRAMES_TX_PRIPAUSE       = 41;
    FRAMES_TX_VLAN           = 42;
    FRAMES_TX_LESS_THAN_64B  = 43;
    FRAMES_TX_64B            = 44;
    FRAMES_TX_65B_127B       = 45;
    FRAMES_TX_128B_255B      = 46;
    FRAMES_TX_256B_511B      = 47;
    FRAMES_TX_512B_1023B     = 48;
    FRAMES_TX_1024B_1518B    = 49;
    FRAMES_TX_1519B_2047B    = 50;
    FRAMES_TX_2048B_4095B    = 51;
    FRAMES_TX_4096B_8191B    = 52;
    FRAMES_TX_8192B_9215B    = 53;
    FRAMES_TX_OTHER          = 54;
    FRAMES_TX_PRI_0          = 55;
    FRAMES_TX_PRI_1          = 56;
    FRAMES_TX_PRI_2          = 57;
    FRAMES_TX_PRI_3          = 58;
    FRAMES_TX_PRI_4          = 59;
    FRAMES_TX_PRI_5          = 60;
    FRAMES_TX_PRI_6          = 61;
    FRAMES_TX_PRI_7          = 62;
    FRAMES_RX_PRI_0          = 63;
    FRAMES_RX_PRI_1          = 64;
    FRAMES_RX_PRI_2          = 65;
    FRAMES_RX_PRI_3          = 66;
    FRAMES_RX_PRI_4          = 67;
    FRAMES_RX_PRI_5          = 68;
    FRAMES_RX_PRI_6          = 69;
    FRAMES_RX_PRI_7          = 70;
    TX_PRIPAUSE_0_1US_COUNT  = 71;
    TX_PRIPAUSE_1_1US_COUNT  = 72;
    TX_PRIPAUSE_2_1US_COUNT  = 73;
    TX_PRIPAUSE_3_1US_COUNT  = 74;
    TX_PRIPAUSE_4_1US_COUNT  = 75;
    TX_PRIPAUSE_5_1US_COUNT  = 76;
    TX_PRIPAUSE_6_1US_COUNT  = 77;
    TX_PRIPAUSE_7_1US_COUNT  = 78;
    RX_PRIPAUSE_0_1US_COUNT  = 79;
    RX_PRIPAUSE_1_1US_COUNT  = 80;
    RX_PRIPAUSE_2_1US_COUNT  = 81;
    RX_PRIPAUSE_3_1US_COUNT  = 82;
    RX_PRIPAUSE_4_1US_COUNT  = 83;
    RX_PRIPAUSE_5_1US_COUNT  = 84;
    RX_PRIPAUSE_6_1US_COUNT  = 85;
    RX_PRIPAUSE_7_1US_COUNT  = 86;
    RX_PAUSE_1US_COUNT       = 87;
    FRAMES_TX_TRUNCATED      = 88;
    RSFEC_CORRECTABLE_WORD   = 89;
    RSFEC_CH_SYMBOL_ERR_CNT  = 90;
}

// Stats encapsulates the statistics fields as a map, where keys are string identifiers
// and values are unsigned integers representing the statistics count.
message Stats {
    // A map of statistics where the key is the statistic name (string), and the value is the statistic count (uint64).
    map<string, uint64> Stats = 1 [(go.field).tags = 'json:",inline,omitempty"'];
}

// PortStats represents the statistics of an individual port, identified by a unique ID.
message PortStats {
    // Unique identifier for the port
    string ID   = 1 [(go.field).tags = 'json:"id,omitempty"'];

    // Stats field that contains various statistics for the port, such as RX, TX counts, etc.
    Stats Stats = 2 [(go.field).tags = 'json:",inline,omitempty"'];
}

// NICPortStats represents a collection of port statistics grouped by NIC ID.
// This allows statistics to be organized by Network Interface Cards (NICs).
message NICPortStats {
    // Unique identifier for the NIC
    string ID               = 1 [(go.field).tags = 'json:"id,omitempty"'];

    // A list of PortStats, each representing statistics for an individual port on this NIC.
    repeated PortStats Port = 2 [(go.field).tags = 'json:"port,omitempty"'];
}

// PortStatsList represents a list of AI NIC port statistics. This is typically used to store statistics
// for multiple NICs in a system, where each NIC has its associated ports with statistics.
message PortStatsList {
    // A list of NICPortStats, each representing statistics for a particular NIC.
    repeated NICPortStats Nic = 1 [(go.field).tags = 'json:"nic,omitempty"'];
}