/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen --destination=/usr/src/github.com/ROCm/device-metrics-exporter/pkg/amdgpu/mock_gen/mock_scheduler.go -package=mock_gen --source=scheduler.go
//

// Package mock_gen is a generated GoMock package.
package mock_gen

import (
	reflect "reflect"

	scheduler "github.com/ROCm/device-metrics-exporter/pkg/exporter/scheduler"
	gomock "go.uber.org/mock/gomock"
)

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
	isgomock struct{}
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// CheckExportLabels mocks base method.
func (m *MockSchedulerClient) CheckExportLabels(labels map[string]bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExportLabels", labels)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckExportLabels indicates an expected call of CheckExportLabels.
func (mr *MockSchedulerClientMockRecorder) CheckExportLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExportLabels", reflect.TypeOf((*MockSchedulerClient)(nil).CheckExportLabels), labels)
}

// Close mocks base method.
func (m *MockSchedulerClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSchedulerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSchedulerClient)(nil).Close))
}

// ListWorkloads mocks base method.
func (m *MockSchedulerClient) ListWorkloads() (map[string]scheduler.Workload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads")
	ret0, _ := ret[0].(map[string]scheduler.Workload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads.
func (mr *MockSchedulerClientMockRecorder) ListWorkloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockSchedulerClient)(nil).ListWorkloads))
}

// Type mocks base method.
func (m *MockSchedulerClient) Type() scheduler.SchedulerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(scheduler.SchedulerType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockSchedulerClientMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSchedulerClient)(nil).Type))
}
